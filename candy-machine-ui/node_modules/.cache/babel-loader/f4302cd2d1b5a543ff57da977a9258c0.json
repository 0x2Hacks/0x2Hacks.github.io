{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _asyncToGenerator = require(\"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSolanaGateway = exports.chainImplementation = void 0;\n\nvar solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\n\nvar common_gateway_react_1 = require(\"@civic/common-gateway-react\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar prove_solana_wallet_1 = require(\"@identity.com/prove-solana-wallet\");\n\nvar config_1 = require(\"./config\");\n\nvar version_1 = require(\"./version\");\n\nvar createSolanaTransactionFromBase64 = function createSolanaTransactionFromBase64(partiallySignedTx) {\n  return web3_js_1.Transaction.from(Buffer.from(partiallySignedTx, 'base64'));\n};\n\nvar chainImplementation = function chainImplementation(_ref) {\n  var clusterUrl = _ref.clusterUrl,\n      cluster = _ref.cluster,\n      publicKey = _ref.publicKey,\n      signTransaction = _ref.signTransaction,\n      handleTransaction = _ref.handleTransaction,\n      gatekeeperNetworkAddress = _ref.gatekeeperNetworkAddress,\n      stage = _ref.stage;\n  common_gateway_react_1.logger.debug('Connecting to cluster with commitment recent', clusterUrl);\n  var connection = new web3_js_1.Connection(clusterUrl, 'processed');\n  return {\n    addOnGatewayTokenChangeListener: function () {\n      var _addOnGatewayTokenChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(gatewayToken, tokenDidChange) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", Promise.resolve((0, solana_gateway_ts_1.onGatewayTokenChange)(connection, new web3_js_1.PublicKey(gatewayToken.identifier), function (token) {\n                  tokenDidChange({\n                    issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n                    gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n                    owner: token.owner.toBase58(),\n                    state: common_gateway_react_1.State[token.state],\n                    identifier: token.publicKey.toBase58(),\n                    expiryTime: token.expiryTime\n                  });\n                })));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function addOnGatewayTokenChangeListener(_x, _x2) {\n        return _addOnGatewayTokenChangeListener.apply(this, arguments);\n      }\n\n      return addOnGatewayTokenChangeListener;\n    }(),\n    removeOnGatewayTokenChangeListener: function removeOnGatewayTokenChangeListener(listenerId) {\n      (0, solana_gateway_ts_1.removeAccountChangeListener)(connection, listenerId);\n    },\n    findGatewayToken: function () {\n      var _findGatewayToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var onChainToken;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, solana_gateway_ts_1.findGatewayToken)(connection, publicKey, new web3_js_1.PublicKey(gatekeeperNetworkAddress));\n\n              case 2:\n                onChainToken = _context2.sent;\n\n                if (onChainToken) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", undefined);\n\n              case 5:\n                return _context2.abrupt(\"return\", {\n                  issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n                  gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n                  owner: onChainToken.owner.toBase58(),\n                  state: common_gateway_react_1.State[onChainToken.state],\n                  identifier: onChainToken.publicKey.toBase58(),\n                  expiryTime: onChainToken.expiryTime\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function findGatewayToken() {\n        return _findGatewayToken.apply(this, arguments);\n      }\n\n      return findGatewayToken;\n    }(),\n    proveWalletOwnership: function () {\n      var _proveWalletOwnership = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, prove_solana_wallet_1.prove)(publicKey, signTransaction, (0, config_1.makeConfig)(clusterUrl, cluster));\n\n              case 2:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", result.toString('base64'));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function proveWalletOwnership() {\n        return _proveWalletOwnership.apply(this, arguments);\n      }\n\n      return proveWalletOwnership;\n    }(),\n    handleUserSignedTransaction: function () {\n      var _handleUserSignedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(partiallySignedTx) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!handleTransaction) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                _context4.next = 3;\n                return handleTransaction(createSolanaTransactionFromBase64(partiallySignedTx));\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function handleUserSignedTransaction(_x3) {\n        return _handleUserSignedTransaction.apply(this, arguments);\n      }\n\n      return handleUserSignedTransaction;\n    }(),\n    chainType: common_gateway_react_1.ChainType.SOLANA,\n    httpConfig: {\n      baseUrl: (0, config_1.getGatekeeperEndpoint)(stage),\n      queryParams: {\n        network: cluster\n      },\n      headers: {\n        'X-Civic-Client': version_1.VERSION\n      }\n    }\n  };\n};\n\nexports.chainImplementation = chainImplementation;\n\nvar useSolanaGateway = function useSolanaGateway() {\n  var _ref2 = (0, common_gateway_react_1.useGateway)(),\n      gatewayToken = _ref2.gatewayToken,\n      gatewayTokenTransaction = _ref2.gatewayTokenTransaction;\n\n  var solanaGatewayToken = gatewayToken ? {\n    issuingGatekeeper: new web3_js_1.PublicKey(gatewayToken.issuingGatekeeper),\n    gatekeeperNetworkAddress: new web3_js_1.PublicKey(gatewayToken.gatekeeperNetworkAddress),\n    owner: new web3_js_1.PublicKey(gatewayToken.owner),\n    state: gatewayToken.state,\n    publicKey: new web3_js_1.PublicKey(gatewayToken.identifier),\n    expiryTime: gatewayToken.expiryTime\n  } : undefined;\n  var solanaGatewayTokenTransaction = gatewayTokenTransaction ? createSolanaTransactionFromBase64(gatewayTokenTransaction) : undefined;\n  return Object.assign(Object.assign({}, (0, common_gateway_react_1.useGateway)()), {\n    gatewayToken: solanaGatewayToken,\n    gatewayTokenTransaction: solanaGatewayTokenTransaction\n  });\n};\n\nexports.useSolanaGateway = useSolanaGateway;","map":{"version":3,"sources":["/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/chainImplementation.js"],"names":["Object","defineProperty","exports","value","useSolanaGateway","chainImplementation","solana_gateway_ts_1","require","common_gateway_react_1","web3_js_1","prove_solana_wallet_1","config_1","version_1","createSolanaTransactionFromBase64","partiallySignedTx","Transaction","from","Buffer","clusterUrl","cluster","publicKey","signTransaction","handleTransaction","gatekeeperNetworkAddress","stage","logger","debug","connection","Connection","addOnGatewayTokenChangeListener","gatewayToken","tokenDidChange","Promise","resolve","onGatewayTokenChange","PublicKey","identifier","token","issuingGatekeeper","toBase58","gatekeeperNetwork","owner","state","State","expiryTime","removeOnGatewayTokenChangeListener","listenerId","removeAccountChangeListener","findGatewayToken","onChainToken","undefined","proveWalletOwnership","prove","makeConfig","result","toString","handleUserSignedTransaction","chainType","ChainType","SOLANA","httpConfig","baseUrl","getGatekeeperEndpoint","queryParams","network","headers","VERSION","useGateway","gatewayTokenTransaction","solanaGatewayToken","solanaGatewayTokenTransaction","assign"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useSolanaGateway = exports.chainImplementation = void 0;\nconst solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\nconst common_gateway_react_1 = require(\"@civic/common-gateway-react\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst prove_solana_wallet_1 = require(\"@identity.com/prove-solana-wallet\");\nconst config_1 = require(\"./config\");\nconst version_1 = require(\"./version\");\nconst createSolanaTransactionFromBase64 = (partiallySignedTx) => web3_js_1.Transaction.from(Buffer.from(partiallySignedTx, 'base64'));\nconst chainImplementation = ({ clusterUrl, cluster, publicKey, signTransaction, handleTransaction, gatekeeperNetworkAddress, stage, }) => {\n    common_gateway_react_1.logger.debug('Connecting to cluster with commitment recent', clusterUrl);\n    const connection = new web3_js_1.Connection(clusterUrl, 'processed');\n    return {\n        addOnGatewayTokenChangeListener: async (gatewayToken, tokenDidChange) => {\n            return Promise.resolve((0, solana_gateway_ts_1.onGatewayTokenChange)(connection, new web3_js_1.PublicKey(gatewayToken.identifier), (token) => {\n                tokenDidChange({\n                    issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n                    gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n                    owner: token.owner.toBase58(),\n                    state: common_gateway_react_1.State[token.state],\n                    identifier: token.publicKey.toBase58(),\n                    expiryTime: token.expiryTime,\n                });\n            }));\n        },\n        removeOnGatewayTokenChangeListener: (listenerId) => {\n            (0, solana_gateway_ts_1.removeAccountChangeListener)(connection, listenerId);\n        },\n        findGatewayToken: async () => {\n            const onChainToken = await (0, solana_gateway_ts_1.findGatewayToken)(connection, publicKey, new web3_js_1.PublicKey(gatekeeperNetworkAddress));\n            if (!onChainToken)\n                return undefined;\n            return {\n                issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n                gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n                owner: onChainToken.owner.toBase58(),\n                state: common_gateway_react_1.State[onChainToken.state],\n                identifier: onChainToken.publicKey.toBase58(),\n                expiryTime: onChainToken.expiryTime,\n            };\n        },\n        proveWalletOwnership: async () => {\n            const result = await (0, prove_solana_wallet_1.prove)(publicKey, signTransaction, (0, config_1.makeConfig)(clusterUrl, cluster));\n            return result.toString('base64');\n        },\n        handleUserSignedTransaction: async (partiallySignedTx) => {\n            if (handleTransaction) {\n                await handleTransaction(createSolanaTransactionFromBase64(partiallySignedTx));\n            }\n            // The user can still request broadcastTransaction to be false and then\n            // useGateway to instead retrieve the GatewayTokenTransaction instead of\n            // using a callback. The callback is optional so ignore it if it has not been supplied\n        },\n        chainType: common_gateway_react_1.ChainType.SOLANA,\n        httpConfig: {\n            baseUrl: (0, config_1.getGatekeeperEndpoint)(stage),\n            queryParams: { network: cluster },\n            headers: { 'X-Civic-Client': version_1.VERSION },\n        },\n    };\n};\nexports.chainImplementation = chainImplementation;\nconst useSolanaGateway = () => {\n    const { gatewayToken, gatewayTokenTransaction } = (0, common_gateway_react_1.useGateway)();\n    const solanaGatewayToken = gatewayToken\n        ? {\n            issuingGatekeeper: new web3_js_1.PublicKey(gatewayToken.issuingGatekeeper),\n            gatekeeperNetworkAddress: new web3_js_1.PublicKey(gatewayToken.gatekeeperNetworkAddress),\n            owner: new web3_js_1.PublicKey(gatewayToken.owner),\n            state: gatewayToken.state,\n            publicKey: new web3_js_1.PublicKey(gatewayToken.identifier),\n            expiryTime: gatewayToken.expiryTime,\n        }\n        : undefined;\n    const solanaGatewayTokenTransaction = gatewayTokenTransaction\n        ? createSolanaTransactionFromBase64(gatewayTokenTransaction)\n        : undefined;\n    return Object.assign(Object.assign({}, (0, common_gateway_react_1.useGateway)()), { gatewayToken: solanaGatewayToken, gatewayTokenTransaction: solanaGatewayTokenTransaction });\n};\nexports.useSolanaGateway = useSolanaGateway;\n"]},"metadata":{},"sourceType":"script"}