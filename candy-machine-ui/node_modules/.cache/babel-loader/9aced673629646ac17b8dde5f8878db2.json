{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pollUntilConditionMet = exports.sleep = void 0;\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst sleep = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nexports.sleep = sleep;\n\nconst pollUntilConditionMet = async function (fnToRun, conditionChecker) {\n  let interval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2000;\n  let retries = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20;\n\n  if (retries <= 0) {\n    logger_1.default.debug('WaitForStatusChange - no more retries');\n    throw new Error(`pollUntilConditionMet all retries used calling ${fnToRun}`);\n  }\n\n  logger_1.default.debug(`calling ${fnToRun.name} retries = ${retries}`);\n  const result = await fnToRun();\n\n  if (conditionChecker(result)) {\n    return result;\n  }\n\n  logger_1.default.debug(`Waiting ${interval}ms before running ${fnToRun.name} and checking condition ${conditionChecker}`);\n  await (0, exports.sleep)(interval);\n  return (0, exports.pollUntilConditionMet)(fnToRun, conditionChecker, interval, retries - 1);\n};\n\nexports.pollUntilConditionMet = pollUntilConditionMet;","map":{"version":3,"sources":["/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@civic/common-gateway-react/dist/esm/actionCreator/utils.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","pollUntilConditionMet","sleep","logger_1","require","ms","Promise","resolve","setTimeout","fnToRun","conditionChecker","interval","retries","default","debug","Error","name","result"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,qBAAR,GAAgCF,OAAO,CAACG,KAAR,GAAgB,KAAK,CAArD;;AACA,MAAMC,QAAQ,GAAGT,eAAe,CAACU,OAAO,CAAC,WAAD,CAAR,CAAhC;;AACA,MAAMF,KAAK,GAAIG,EAAD,IAAQ;AAClB,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAnC,CAAP;AACH,CAFD;;AAGAN,OAAO,CAACG,KAAR,GAAgBA,KAAhB;;AACA,MAAMD,qBAAqB,GAAG,gBAAOQ,OAAP,EAAgBC,gBAAhB,EAAoE;AAAA,MAAlCC,QAAkC,uEAAvB,IAAuB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AAC9F,MAAIA,OAAO,IAAI,CAAf,EAAkB;AACdT,IAAAA,QAAQ,CAACU,OAAT,CAAiBC,KAAjB,CAAuB,uCAAvB;AACA,UAAM,IAAIC,KAAJ,CAAW,kDAAiDN,OAAQ,EAApE,CAAN;AACH;;AACDN,EAAAA,QAAQ,CAACU,OAAT,CAAiBC,KAAjB,CAAwB,WAAUL,OAAO,CAACO,IAAK,cAAaJ,OAAQ,EAApE;AACA,QAAMK,MAAM,GAAI,MAAMR,OAAO,EAA7B;;AACA,MAAIC,gBAAgB,CAACO,MAAD,CAApB,EAA8B;AAC1B,WAAOA,MAAP;AACH;;AACDd,EAAAA,QAAQ,CAACU,OAAT,CAAiBC,KAAjB,CAAwB,WAAUH,QAAS,qBAAoBF,OAAO,CAACO,IAAK,2BAA0BN,gBAAiB,EAAvH;AACA,QAAM,CAAC,GAAGX,OAAO,CAACG,KAAZ,EAAmBS,QAAnB,CAAN;AACA,SAAO,CAAC,GAAGZ,OAAO,CAACE,qBAAZ,EAAmCQ,OAAnC,EAA4CC,gBAA5C,EAA8DC,QAA9D,EAAwEC,OAAO,GAAG,CAAlF,CAAP;AACH,CAbD;;AAcAb,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pollUntilConditionMet = exports.sleep = void 0;\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst sleep = (ms) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n};\nexports.sleep = sleep;\nconst pollUntilConditionMet = async (fnToRun, conditionChecker, interval = 2000, retries = 20) => {\n    if (retries <= 0) {\n        logger_1.default.debug('WaitForStatusChange - no more retries');\n        throw new Error(`pollUntilConditionMet all retries used calling ${fnToRun}`);\n    }\n    logger_1.default.debug(`calling ${fnToRun.name} retries = ${retries}`);\n    const result = (await fnToRun());\n    if (conditionChecker(result)) {\n        return result;\n    }\n    logger_1.default.debug(`Waiting ${interval}ms before running ${fnToRun.name} and checking condition ${conditionChecker}`);\n    await (0, exports.sleep)(interval);\n    return (0, exports.pollUntilConditionMet)(fnToRun, conditionChecker, interval, retries - 1);\n};\nexports.pollUntilConditionMet = pollUntilConditionMet;\n"]},"metadata":{},"sourceType":"script"}