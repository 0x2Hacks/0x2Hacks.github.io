{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gatekeeperExists = exports.getGatewayToken = exports.removeAccountChangeListener = exports.onGatewayTokenChange = exports.findGatewayToken = exports.findGatewayTokens = exports.dataToGatewayToken = exports.getGatewayTokenAddressForOwnerAndGatekeeperNetwork = exports.getGatekeeperAccountAddress = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar constants_1 = require(\"./constants\");\n\nvar types_1 = require(\"../types\");\n\nvar GatewayTokenData_1 = require(\"./GatewayTokenData\");\n/**\n * Derive the address of the gatekeeper PDA for this gatekeeper\n * @param authority The gatekeeper\n * @param network The network\n */\n\n\nvar getGatekeeperAccountAddress = function getGatekeeperAccountAddress(authority, network) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var publicKeyNonce;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return web3_js_1.PublicKey.findProgramAddress([authority.toBuffer(), network.toBuffer(), Buffer.from(constants_1.GATEKEEPER_NONCE_SEED_STRING, \"utf8\")], constants_1.PROGRAM_ID);\n\n          case 2:\n            publicKeyNonce = _context.sent;\n            return _context.abrupt(\"return\", publicKeyNonce[0]);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\n\nexports.getGatekeeperAccountAddress = getGatekeeperAccountAddress;\n/**\n * Derive the address of the gateway token PDA for this owner address and optional seed.\n * @param owner The owner of the gateway token\n * @param gatekeeperNetwork The network of the gateway token\n * @param seed An 8-byte seed array, used to add multiple tokens to the same owner. Must be unique to each token, if present\n */\n\nvar getGatewayTokenAddressForOwnerAndGatekeeperNetwork = function getGatewayTokenAddressForOwnerAndGatekeeperNetwork(owner, gatekeeperNetwork, seed) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var additionalSeed, seeds, publicKeyNonce;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            additionalSeed = seed ? Buffer.from(seed) : Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]);\n\n            if (!(additionalSeed.length != 8)) {\n              _context2.next = 3;\n              break;\n            }\n\n            throw new Error(\"Additional Seed has length \" + additionalSeed.length + \" instead of 8 when calling getGatewayTokenAddressForOwnerAndGatekeeperNetwork.\");\n\n          case 3:\n            seeds = [owner.toBuffer(), Buffer.from(constants_1.GATEWAY_TOKEN_ADDRESS_SEED, \"utf8\"), additionalSeed, gatekeeperNetwork.toBuffer()];\n            _context2.next = 6;\n            return web3_js_1.PublicKey.findProgramAddress(seeds, constants_1.PROGRAM_ID);\n\n          case 6:\n            publicKeyNonce = _context2.sent;\n            return _context2.abrupt(\"return\", publicKeyNonce[0]);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n};\n\nexports.getGatewayTokenAddressForOwnerAndGatekeeperNetwork = getGatewayTokenAddressForOwnerAndGatekeeperNetwork; // Based on solana/integration-lib/src/state.rs\n// If the optional the parent-gateway-token field is populated, this value will be\n// 34 (2 + 32) instead. TODO IDCOM-320 restructure the gateway token accounts to put\n// all optional values at the end of the struct to simplify account parsing a little\n\nvar GATEWAY_TOKEN_ACCOUNT_OWNER_FIELD_OFFSET = 2; // As above, if optional fields are present, this will differ. TODO IDCOM-320 fixes this\n\nvar GATEWAY_TOKEN_ACCOUNT_GATEKEEPER_NETWORK_FIELD_OFFSET = 35;\n\nfunction fromGatewayTokenState(state) {\n  if (!!state.active) return types_1.State.ACTIVE;\n  if (!!state.revoked) return types_1.State.REVOKED;\n  if (!!state.frozen) return types_1.State.FROZEN;\n  throw new Error(\"Unrecognised state \" + JSON.stringify(state));\n}\n\nvar dataToGatewayToken = function dataToGatewayToken(data, publicKey) {\n  var _a;\n\n  return new types_1.GatewayToken(data.issuingGatekeeper.toPublicKey(), data.gatekeeperNetwork.toPublicKey(), data.owner.toPublicKey(), fromGatewayTokenState(data.state), publicKey, constants_1.PROGRAM_ID, (_a = data.expiry) === null || _a === void 0 ? void 0 : _a.toNumber());\n};\n\nexports.dataToGatewayToken = dataToGatewayToken;\n/**\n * Find all gateway tokens for a user on a gatekeeper network, optionally filtering out revoked tokens.\n *\n * Warning - this uses the Solana getProgramAccounts RPC endpoint, which is inefficient and may be\n * blocked by some RPC services.\n *\n * @param connection A solana connection object\n * @param owner The token owner\n * @param gatekeeperNetwork The network to find a token for\n * @param {boolean=false} includeRevoked If false (default), filter out revoked tokens\n * @returns {Promise<GatewayToken[]>} All tokens for the owner\n */\n\nvar findGatewayTokens = function findGatewayTokens(connection, owner, gatekeeperNetwork) {\n  var includeRevoked = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var ownerFilter, gatekeeperNetworkFilter, filters, accountsResponse, toGatewayToken;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            ownerFilter = {\n              memcmp: {\n                offset: GATEWAY_TOKEN_ACCOUNT_OWNER_FIELD_OFFSET,\n                bytes: owner.toBase58()\n              }\n            };\n            gatekeeperNetworkFilter = {\n              memcmp: {\n                offset: GATEWAY_TOKEN_ACCOUNT_GATEKEEPER_NETWORK_FIELD_OFFSET,\n                bytes: gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58()\n              }\n            };\n            filters = [ownerFilter, gatekeeperNetworkFilter];\n            _context3.next = 5;\n            return connection.getProgramAccounts(constants_1.PROGRAM_ID, {\n              filters: filters\n            });\n\n          case 5:\n            accountsResponse = _context3.sent;\n\n            if (accountsResponse) {\n              _context3.next = 8;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", []);\n\n          case 8:\n            toGatewayToken = function toGatewayToken(_ref) {\n              var pubkey = _ref.pubkey,\n                  account = _ref.account;\n              return (0, exports.dataToGatewayToken)(GatewayTokenData_1.GatewayTokenData.fromAccount(account.data), pubkey);\n            };\n\n            return _context3.abrupt(\"return\", accountsResponse.map(toGatewayToken).filter(function (gatewayToken) {\n              return gatewayToken.state !== types_1.State.REVOKED || includeRevoked;\n            }));\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n};\n\nexports.findGatewayTokens = findGatewayTokens;\n/**\n * Get a gateway token for the owner and network, if it exists.\n * @param connection A solana connection object\n * @param owner The token owner\n * @param gatekeeperNetwork The network to find a token for\n * @returns Promise<GatewayToken | null> An unrevoked token, if one exists for the owner\n */\n\nvar findGatewayToken = function findGatewayToken(connection, owner, gatekeeperNetwork) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var gatewayTokenAddress, account;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return (0, exports.getGatewayTokenAddressForOwnerAndGatekeeperNetwork)(owner, gatekeeperNetwork);\n\n          case 2:\n            gatewayTokenAddress = _context4.sent;\n            _context4.next = 5;\n            return connection.getAccountInfo(gatewayTokenAddress, constants_1.SOLANA_COMMITMENT);\n\n          case 5:\n            account = _context4.sent;\n\n            if (account) {\n              _context4.next = 8;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", null);\n\n          case 8:\n            return _context4.abrupt(\"return\", (0, exports.dataToGatewayToken)(GatewayTokenData_1.GatewayTokenData.fromAccount(account.data), gatewayTokenAddress));\n\n          case 9:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n};\n\nexports.findGatewayToken = findGatewayToken;\n/**\n * Register a callback to be called whenever a gateway token changes state\n * @param connection A solana connection object\n * @param gatewayTokenAddress The address of the gateway token\n * @param callback The callback to register\n * @param commitment The solana commitment level at which to register gateway token changes. Defaults to 'confirmed'\n * @return The subscription id\n */\n\nvar onGatewayTokenChange = function onGatewayTokenChange(connection, gatewayTokenAddress, callback) {\n  var commitment = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_1.SOLANA_COMMITMENT;\n\n  var accountCallback = function accountCallback(accountInfo) {\n    var gatewayToken = (0, exports.dataToGatewayToken)(GatewayTokenData_1.GatewayTokenData.fromAccount(accountInfo.data), gatewayTokenAddress);\n    callback(gatewayToken);\n  };\n\n  return connection.onAccountChange(gatewayTokenAddress, accountCallback, commitment);\n};\n\nexports.onGatewayTokenChange = onGatewayTokenChange;\n/**\n * Stops listening to gateway state changes\n * @param connection A solana connection object\n * @param id The subscription id to deregister\n */\n\nvar removeAccountChangeListener = function removeAccountChangeListener(connection, id) {\n  return connection.removeAccountChangeListener(id);\n};\n\nexports.removeAccountChangeListener = removeAccountChangeListener;\n/**\n * Lookup the gateway token at a given address\n * @param connection A solana connection object\n * @param gatewayTokenAddress The address of the gateway token\n */\n\nvar getGatewayToken = function getGatewayToken(connection, gatewayTokenAddress) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var account;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return connection.getAccountInfo(gatewayTokenAddress, constants_1.SOLANA_COMMITMENT);\n\n          case 2:\n            account = _context5.sent;\n\n            if (account) {\n              _context5.next = 5;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", null);\n\n          case 5:\n            return _context5.abrupt(\"return\", (0, exports.dataToGatewayToken)(GatewayTokenData_1.GatewayTokenData.fromAccount(account.data), gatewayTokenAddress));\n\n          case 6:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n};\n\nexports.getGatewayToken = getGatewayToken;\n/**\n * Returns whether or not a gatekeeper exists from a network and authority\n * @param connection A solana connection\n * @param gatekeeperAuthority The authority of the gatekeeper\n * @param gatekeeperNetwork The network of the gatekeeper\n */\n\nvar gatekeeperExists = function gatekeeperExists(connection, gatekeeperAuthority, gatekeeperNetwork) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n    var gatekeeperAccount, account;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return (0, exports.getGatekeeperAccountAddress)(gatekeeperAuthority, gatekeeperNetwork);\n\n          case 2:\n            gatekeeperAccount = _context6.sent;\n            _context6.next = 5;\n            return connection.getAccountInfo(gatekeeperAccount, constants_1.SOLANA_COMMITMENT);\n\n          case 5:\n            account = _context6.sent;\n            return _context6.abrupt(\"return\", account != null && account.owner == constants_1.PROGRAM_ID);\n\n          case 7:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n};\n\nexports.gatekeeperExists = gatekeeperExists;","map":{"version":3,"sources":["../../src/lib/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.gatekeeperExists = exports.getGatewayToken = exports.removeAccountChangeListener = exports.onGatewayTokenChange = exports.findGatewayToken = exports.findGatewayTokens = exports.dataToGatewayToken = exports.getGatewayTokenAddressForOwnerAndGatekeeperNetwork = exports.getGatekeeperAccountAddress = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_1 = require(\"./constants\");\nconst types_1 = require(\"../types\");\nconst GatewayTokenData_1 = require(\"./GatewayTokenData\");\n/**\n * Derive the address of the gatekeeper PDA for this gatekeeper\n * @param authority The gatekeeper\n * @param network The network\n */\nconst getGatekeeperAccountAddress = (authority, network) => __awaiter(void 0, void 0, void 0, function* () {\n    const publicKeyNonce = yield web3_js_1.PublicKey.findProgramAddress([\n        authority.toBuffer(),\n        network.toBuffer(),\n        Buffer.from(constants_1.GATEKEEPER_NONCE_SEED_STRING, \"utf8\"),\n    ], constants_1.PROGRAM_ID);\n    return publicKeyNonce[0];\n});\nexports.getGatekeeperAccountAddress = getGatekeeperAccountAddress;\n/**\n * Derive the address of the gateway token PDA for this owner address and optional seed.\n * @param owner The owner of the gateway token\n * @param gatekeeperNetwork The network of the gateway token\n * @param seed An 8-byte seed array, used to add multiple tokens to the same owner. Must be unique to each token, if present\n */\nconst getGatewayTokenAddressForOwnerAndGatekeeperNetwork = (owner, gatekeeperNetwork, seed) => __awaiter(void 0, void 0, void 0, function* () {\n    const additionalSeed = seed\n        ? Buffer.from(seed)\n        : Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]);\n    if (additionalSeed.length != 8) {\n        throw new Error(\"Additional Seed has length \" +\n            additionalSeed.length +\n            \" instead of 8 when calling getGatewayTokenAddressForOwnerAndGatekeeperNetwork.\");\n    }\n    const seeds = [\n        owner.toBuffer(),\n        Buffer.from(constants_1.GATEWAY_TOKEN_ADDRESS_SEED, \"utf8\"),\n        additionalSeed,\n        gatekeeperNetwork.toBuffer(),\n    ];\n    const publicKeyNonce = yield web3_js_1.PublicKey.findProgramAddress(seeds, constants_1.PROGRAM_ID);\n    return publicKeyNonce[0];\n});\nexports.getGatewayTokenAddressForOwnerAndGatekeeperNetwork = getGatewayTokenAddressForOwnerAndGatekeeperNetwork;\n// Based on solana/integration-lib/src/state.rs\n// If the optional the parent-gateway-token field is populated, this value will be\n// 34 (2 + 32) instead. TODO IDCOM-320 restructure the gateway token accounts to put\n// all optional values at the end of the struct to simplify account parsing a little\nconst GATEWAY_TOKEN_ACCOUNT_OWNER_FIELD_OFFSET = 2;\n// As above, if optional fields are present, this will differ. TODO IDCOM-320 fixes this\nconst GATEWAY_TOKEN_ACCOUNT_GATEKEEPER_NETWORK_FIELD_OFFSET = 35;\nfunction fromGatewayTokenState(state) {\n    if (!!state.active)\n        return types_1.State.ACTIVE;\n    if (!!state.revoked)\n        return types_1.State.REVOKED;\n    if (!!state.frozen)\n        return types_1.State.FROZEN;\n    throw new Error(\"Unrecognised state \" + JSON.stringify(state));\n}\nconst dataToGatewayToken = (data, publicKey) => {\n    var _a;\n    return new types_1.GatewayToken(data.issuingGatekeeper.toPublicKey(), data.gatekeeperNetwork.toPublicKey(), data.owner.toPublicKey(), fromGatewayTokenState(data.state), publicKey, constants_1.PROGRAM_ID, (_a = data.expiry) === null || _a === void 0 ? void 0 : _a.toNumber());\n};\nexports.dataToGatewayToken = dataToGatewayToken;\n/**\n * Find all gateway tokens for a user on a gatekeeper network, optionally filtering out revoked tokens.\n *\n * Warning - this uses the Solana getProgramAccounts RPC endpoint, which is inefficient and may be\n * blocked by some RPC services.\n *\n * @param connection A solana connection object\n * @param owner The token owner\n * @param gatekeeperNetwork The network to find a token for\n * @param {boolean=false} includeRevoked If false (default), filter out revoked tokens\n * @returns {Promise<GatewayToken[]>} All tokens for the owner\n */\nconst findGatewayTokens = (connection, owner, gatekeeperNetwork, includeRevoked = false) => __awaiter(void 0, void 0, void 0, function* () {\n    const ownerFilter = {\n        memcmp: {\n            offset: GATEWAY_TOKEN_ACCOUNT_OWNER_FIELD_OFFSET,\n            bytes: owner.toBase58(),\n        },\n    };\n    const gatekeeperNetworkFilter = {\n        memcmp: {\n            offset: GATEWAY_TOKEN_ACCOUNT_GATEKEEPER_NETWORK_FIELD_OFFSET,\n            bytes: gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58(),\n        },\n    };\n    const filters = [ownerFilter, gatekeeperNetworkFilter];\n    const accountsResponse = yield connection.getProgramAccounts(constants_1.PROGRAM_ID, {\n        filters,\n    });\n    if (!accountsResponse)\n        return [];\n    const toGatewayToken = ({ pubkey, account, }) => (0, exports.dataToGatewayToken)(GatewayTokenData_1.GatewayTokenData.fromAccount(account.data), pubkey);\n    return accountsResponse\n        .map(toGatewayToken)\n        .filter((gatewayToken) => gatewayToken.state !== types_1.State.REVOKED || includeRevoked);\n});\nexports.findGatewayTokens = findGatewayTokens;\n/**\n * Get a gateway token for the owner and network, if it exists.\n * @param connection A solana connection object\n * @param owner The token owner\n * @param gatekeeperNetwork The network to find a token for\n * @returns Promise<GatewayToken | null> An unrevoked token, if one exists for the owner\n */\nconst findGatewayToken = (connection, owner, gatekeeperNetwork) => __awaiter(void 0, void 0, void 0, function* () {\n    const gatewayTokenAddress = yield (0, exports.getGatewayTokenAddressForOwnerAndGatekeeperNetwork)(owner, gatekeeperNetwork);\n    const account = yield connection.getAccountInfo(gatewayTokenAddress, constants_1.SOLANA_COMMITMENT);\n    if (!account)\n        return null;\n    return (0, exports.dataToGatewayToken)(GatewayTokenData_1.GatewayTokenData.fromAccount(account.data), gatewayTokenAddress);\n});\nexports.findGatewayToken = findGatewayToken;\n/**\n * Register a callback to be called whenever a gateway token changes state\n * @param connection A solana connection object\n * @param gatewayTokenAddress The address of the gateway token\n * @param callback The callback to register\n * @param commitment The solana commitment level at which to register gateway token changes. Defaults to 'confirmed'\n * @return The subscription id\n */\nconst onGatewayTokenChange = (connection, gatewayTokenAddress, callback, commitment = constants_1.SOLANA_COMMITMENT) => {\n    const accountCallback = (accountInfo) => {\n        const gatewayToken = (0, exports.dataToGatewayToken)(GatewayTokenData_1.GatewayTokenData.fromAccount(accountInfo.data), gatewayTokenAddress);\n        callback(gatewayToken);\n    };\n    return connection.onAccountChange(gatewayTokenAddress, accountCallback, commitment);\n};\nexports.onGatewayTokenChange = onGatewayTokenChange;\n/**\n * Stops listening to gateway state changes\n * @param connection A solana connection object\n * @param id The subscription id to deregister\n */\nconst removeAccountChangeListener = (connection, id) => connection.removeAccountChangeListener(id);\nexports.removeAccountChangeListener = removeAccountChangeListener;\n/**\n * Lookup the gateway token at a given address\n * @param connection A solana connection object\n * @param gatewayTokenAddress The address of the gateway token\n */\nconst getGatewayToken = (connection, gatewayTokenAddress) => __awaiter(void 0, void 0, void 0, function* () {\n    const account = yield connection.getAccountInfo(gatewayTokenAddress, constants_1.SOLANA_COMMITMENT);\n    if (!account)\n        return null;\n    return (0, exports.dataToGatewayToken)(GatewayTokenData_1.GatewayTokenData.fromAccount(account.data), gatewayTokenAddress);\n});\nexports.getGatewayToken = getGatewayToken;\n/**\n * Returns whether or not a gatekeeper exists from a network and authority\n * @param connection A solana connection\n * @param gatekeeperAuthority The authority of the gatekeeper\n * @param gatekeeperNetwork The network of the gatekeeper\n */\nconst gatekeeperExists = (connection, gatekeeperAuthority, gatekeeperNetwork) => __awaiter(void 0, void 0, void 0, function* () {\n    const gatekeeperAccount = yield (0, exports.getGatekeeperAccountAddress)(gatekeeperAuthority, gatekeeperNetwork);\n    const account = yield connection.getAccountInfo(gatekeeperAccount, constants_1.SOLANA_COMMITMENT);\n    return account != null && account.owner == constants_1.PROGRAM_ID;\n});\nexports.gatekeeperExists = gatekeeperExists;\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"script"}