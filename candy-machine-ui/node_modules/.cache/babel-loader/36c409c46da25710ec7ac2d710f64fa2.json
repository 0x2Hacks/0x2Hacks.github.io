{"ast":null,"code":"var _require = require('../internal/constants'),\n    MAX_LENGTH = _require.MAX_LENGTH;\n\nvar _require2 = require('../internal/re'),\n    re = _require2.re,\n    t = _require2.t;\n\nvar SemVer = require('../classes/semver');\n\nvar parseOptions = require('../internal/parse-options');\n\nvar parse = function parse(version, options) {\n  options = parseOptions(options);\n\n  if (version instanceof SemVer) {\n    return version;\n  }\n\n  if (typeof version !== 'string') {\n    return null;\n  }\n\n  if (version.length > MAX_LENGTH) {\n    return null;\n  }\n\n  var r = options.loose ? re[t.LOOSE] : re[t.FULL];\n\n  if (!r.test(version)) {\n    return null;\n  }\n\n  try {\n    return new SemVer(version, options);\n  } catch (er) {\n    return null;\n  }\n};\n\nmodule.exports = parse;","map":{"version":3,"sources":["/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@ledgerhq/devices/node_modules/semver/functions/parse.js"],"names":["require","MAX_LENGTH","re","t","SemVer","parseOptions","parse","version","options","length","r","loose","LOOSE","FULL","test","er","module","exports"],"mappings":"AAAA,eAAqBA,OAAO,CAAC,uBAAD,CAA5B;AAAA,IAAOC,UAAP,YAAOA,UAAP;;AACA,gBAAkBD,OAAO,CAAC,gBAAD,CAAzB;AAAA,IAAQE,EAAR,aAAQA,EAAR;AAAA,IAAYC,CAAZ,aAAYA,CAAZ;;AACA,IAAMC,MAAM,GAAGJ,OAAO,CAAC,mBAAD,CAAtB;;AAEA,IAAMK,YAAY,GAAGL,OAAO,CAAC,2BAAD,CAA5B;;AACA,IAAMM,KAAK,GAAG,SAARA,KAAQ,CAACC,OAAD,EAAUC,OAAV,EAAsB;AAClCA,EAAAA,OAAO,GAAGH,YAAY,CAACG,OAAD,CAAtB;;AAEA,MAAID,OAAO,YAAYH,MAAvB,EAA+B;AAC7B,WAAOG,OAAP;AACD;;AAED,MAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,WAAO,IAAP;AACD;;AAED,MAAIA,OAAO,CAACE,MAAR,GAAiBR,UAArB,EAAiC;AAC/B,WAAO,IAAP;AACD;;AAED,MAAMS,CAAC,GAAGF,OAAO,CAACG,KAAR,GAAgBT,EAAE,CAACC,CAAC,CAACS,KAAH,CAAlB,GAA8BV,EAAE,CAACC,CAAC,CAACU,IAAH,CAA1C;;AACA,MAAI,CAACH,CAAC,CAACI,IAAF,CAAOP,OAAP,CAAL,EAAsB;AACpB,WAAO,IAAP;AACD;;AAED,MAAI;AACF,WAAO,IAAIH,MAAJ,CAAWG,OAAX,EAAoBC,OAApB,CAAP;AACD,GAFD,CAEE,OAAOO,EAAP,EAAW;AACX,WAAO,IAAP;AACD;AACF,CAzBD;;AA2BAC,MAAM,CAACC,OAAP,GAAiBX,KAAjB","sourcesContent":["const {MAX_LENGTH} = require('../internal/constants')\nconst { re, t } = require('../internal/re')\nconst SemVer = require('../classes/semver')\n\nconst parseOptions = require('../internal/parse-options')\nconst parse = (version, options) => {\n  options = parseOptions(options)\n\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  if (version.length > MAX_LENGTH) {\n    return null\n  }\n\n  const r = options.loose ? re[t.LOOSE] : re[t.FULL]\n  if (!r.test(version)) {\n    return null\n  }\n\n  try {\n    return new SemVer(version, options)\n  } catch (er) {\n    return null\n  }\n}\n\nmodule.exports = parse\n"]},"metadata":{},"sourceType":"script"}