{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reducer = void 0;\n\nconst react_1 = require(\"react\");\n\nconst status_1 = require(\"../utils/status\");\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst types_1 = require(\"../types\");\n\nconst config_1 = require(\"../config\");\n\nconst utils_1 = require(\"../useReducer/utils\");\n\nconst gatewayStatusToCivicPassAction = {\n  [types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP]: types_1.CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP,\n  [types_1.GatewayStatus.IN_REVIEW]: types_1.CivicPassMessageAction.TOKEN_IN_REVIEW,\n  [types_1.GatewayStatus.ERROR]: types_1.CivicPassMessageAction.ERROR,\n  [types_1.GatewayStatus.ACTIVE]: types_1.CivicPassMessageAction.TOKEN_ACTIVE,\n  [types_1.GatewayStatus.REVOKED]: types_1.CivicPassMessageAction.TOKEN_REVOKED,\n  [types_1.GatewayStatus.FROZEN]: types_1.CivicPassMessageAction.TOKEN_FROZEN,\n  [types_1.GatewayStatus.REJECTED]: types_1.CivicPassMessageAction.TOKEN_REJECTED,\n  [types_1.GatewayStatus.LOCATION_NOT_SUPPORTED]: types_1.CivicPassMessageAction.FAILED_IP_CHECK,\n  [types_1.GatewayStatus.VPN_NOT_SUPPORTED]: types_1.CivicPassMessageAction.FAILED_VPN_CHECK,\n  [types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED]: types_1.CivicPassMessageAction.REFRESH,\n  [types_1.GatewayStatus.CHECKING]: types_1.CivicPassMessageAction.STATUS,\n  [types_1.GatewayStatus.NOT_REQUESTED]: types_1.CivicPassMessageAction.ISSUANCE,\n  [types_1.GatewayStatus.COLLECTING_USER_INFORMATION]: types_1.CivicPassMessageAction.ISSUANCE,\n  [types_1.GatewayStatus.VALIDATING_USER_INFORMATION]: types_1.CivicPassMessageAction.ISSUANCE,\n  [types_1.GatewayStatus.USER_INFORMATION_VALIDATED]: types_1.CivicPassMessageAction.ISSUANCE,\n  [types_1.GatewayStatus.USER_INFORMATION_REJECTED]: types_1.CivicPassMessageAction.ISSUANCE,\n  [types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION]: types_1.CivicPassMessageAction.AWAITING_TRANSACTION_CONFIRMATION,\n  [types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR]: types_1.CivicPassMessageAction.CHAIN_ERROR\n};\nconst validationProcessToGatewayStatus = {\n  [types_1.ValidationStatus.COLLECTING]: types_1.GatewayStatus.COLLECTING_USER_INFORMATION,\n  [types_1.ValidationStatus.PROCESSING]: types_1.GatewayStatus.VALIDATING_USER_INFORMATION,\n  [types_1.ValidationStatus.IN_REVIEW]: types_1.GatewayStatus.VALIDATING_USER_INFORMATION,\n  [types_1.ValidationStatus.FAILED]: types_1.GatewayStatus.USER_INFORMATION_REJECTED,\n  [types_1.ValidationStatus.NOT_FOUND]: types_1.GatewayStatus.NOT_REQUESTED,\n  [types_1.ValidationStatus.COMPLETED]: types_1.GatewayStatus.USER_INFORMATION_VALIDATED\n};\n\nconst logDebug = function (message) {\n  let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return logger_1.default.debug(`[useCivicPass] ${message}`, obj);\n};\n\nconst logError = function (message) {\n  let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return logger_1.default.error(`[useCivicPass] ${message}`, obj);\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\nconst getCivicPassSrcUrl = (state, status) => {\n  const {\n    redirectUrl,\n    gatekeeperNetworkAddress,\n    stage,\n    walletAddress,\n    civicPass,\n    chainType,\n    ownerSigns\n  } = state;\n\n  if (!gatekeeperNetworkAddress || !walletAddress) {\n    logError('Required properties not present', {\n      gatekeeperNetworkAddress,\n      walletAddress\n    });\n    throw new Error(`Required properties not present ${{\n      gatekeeperNetworkAddress,\n      walletAddress\n    }}`);\n  }\n\n  const civicPassSrcUrl = (0, config_1.getCivicPassEndpoint)(stage);\n  const url = new URL(civicPassSrcUrl);\n  const action = gatewayStatusToCivicPassAction[status];\n  const searchParams = new URLSearchParams(Object.assign(Object.assign({}, civicPass.requestPayload), {\n    redirectUrl,\n    networkAddress: gatekeeperNetworkAddress,\n    action,\n    wallet: walletAddress,\n    chain: chainType,\n    ownerSigns: ownerSigns ? 'true' : 'false'\n  }));\n  logDebug('Civic pass query params', {\n    searchParams: searchParams.toString(),\n    gatewayStatus: (0, status_1.statusDisplayValue)(status)\n  });\n  return `${url.href}?${searchParams.toString()}`;\n};\n\nconst reducer = (state, action) => {\n  var _a;\n\n  switch (action.type) {\n    case 'civicPass_check_token_status':\n      {\n        return Object.assign(Object.assign({}, state), {\n          iframeMinimized: !((_a = state.options) === null || _a === void 0 ? void 0 : _a.autoShowModal),\n          renderIframe: true,\n          iframeSrcUrl: state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED ? state.iframeSrcUrl : getCivicPassSrcUrl(state, (0, utils_1.statusFromToken)(state, action.token))\n        });\n      }\n\n    case 'civicPass_check_status':\n      {\n        return Object.assign(Object.assign({}, state), {\n          iframeMinimized: true,\n          renderIframe: true,\n          gatewayStatus: types_1.GatewayStatus.CHECKING,\n          iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.CHECKING)\n        });\n      }\n\n    case 'civicPass_check_status_complete':\n      {\n        const {\n          payload\n        } = action.payload;\n        const {\n          status\n        } = payload;\n        const gatewayStatus = validationProcessToGatewayStatus[status];\n        return Object.assign(Object.assign({}, state), {\n          iframeMinimized: true,\n          renderIframe: false,\n          gatewayStatus\n        });\n      }\n\n    case 'userInteraction_check_gatewayToken_status':\n      {\n        return Object.assign(Object.assign({}, state), {\n          iframeMinimized: false,\n          renderIframe: true,\n          iframeSrcUrl: state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED ? state.iframeSrcUrl : getCivicPassSrcUrl(state, (0, utils_1.statusFromToken)(state, action.token))\n        });\n      }\n\n    case 'civicPass_close':\n      {\n        const {\n          gatewayStatus\n        } = state;\n        const requiresRefresh = gatewayStatus === types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED || gatewayStatus === types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP; // keep iframe in mounted while civic pass is requested, or if we are showing the awaiting owner tx screen\n        // as the internal iframe state needs to be preserved\n\n        const renderIframe = state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED || gatewayStatus === types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION;\n        return Object.assign({}, renderIframe ? Object.assign(Object.assign({}, state), {\n          iframeMinimized: true,\n          renderIframe\n        }) : Object.assign(Object.assign({}, state), {\n          iframeMinimized: true,\n          renderIframe,\n          refreshTokenState: requiresRefresh ? state.refreshTokenState : types_1.RefreshTokenState.COMPLETED\n        }));\n      }\n\n    case 'civicPass_in_progress':\n      {\n        return Object.assign(Object.assign({}, state), {\n          gatewayStatus: types_1.GatewayStatus.COLLECTING_USER_INFORMATION,\n          renderIframe: true,\n          iframeMinimized: false,\n          civicPass: Object.assign(Object.assign({}, state.civicPass), {\n            status: types_1.CivicPassIssuanceStatus.REQUESTED\n          })\n        });\n      }\n\n    case 'civicPass_issuance_success':\n      {\n        const {\n          ownerSigns\n        } = state;\n        const {\n          payload,\n          requiresProofOfWalletOwnership\n        } = action.payload;\n        const shouldRequestPowo = ownerSigns ? false : requiresProofOfWalletOwnership;\n        const gatewayStatus = shouldRequestPowo ? types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP : types_1.GatewayStatus.IN_REVIEW;\n        return Object.assign(Object.assign({}, state), {\n          gatewayStatus,\n          renderIframe: !ownerSigns,\n          iframeMinimized: ownerSigns,\n          powoRequested: 'solana',\n          iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus),\n          civicPass: Object.assign(Object.assign({}, state.civicPass), {\n            status: types_1.CivicPassIssuanceStatus.VERIFIED,\n            responsePayload: {\n              [types_1.CivicPassMessageAction.ISSUANCE]: {\n                payload,\n                requiresProofOfWalletOwnership: shouldRequestPowo\n              }\n            }\n          })\n        });\n      }\n\n    case 'civicPass_issuance_failure':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        iframeMinimized: false,\n        renderIframe: true,\n        gatewayStatus: types_1.GatewayStatus.ERROR\n      });\n\n    case 'civicPass_requested_retries_exhausted':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        refreshTokenState: types_1.RefreshTokenState.NOT_REQUIRED,\n        iframeMinimized: false,\n        renderIframe: true,\n        gatewayStatus: types_1.GatewayStatus.ERROR,\n        iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.ERROR)\n      });\n\n    case 'civicPass_error_user_retry':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        iframeMinimized: false,\n        renderIframe: true,\n        gatewayStatus: types_1.GatewayStatus.NOT_REQUESTED,\n        iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.NOT_REQUESTED)\n      });\n\n    case 'civicPass_issuance_cancelled':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        gatewayStatus: types_1.GatewayStatus.NOT_REQUESTED\n      });\n\n    case 'civicPass_refresh_success':\n      {\n        const {\n          ownerSigns\n        } = state;\n        const {\n          payload,\n          requiresProofOfWalletOwnership\n        } = action.payload;\n        const shouldRequestPowo = ownerSigns ? false : requiresProofOfWalletOwnership;\n        const gatewayStatus = shouldRequestPowo ? types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP : types_1.GatewayStatus.IN_REVIEW;\n        return Object.assign(Object.assign({}, state), {\n          gatewayStatus,\n          renderIframe: !ownerSigns,\n          iframeMinimized: ownerSigns,\n          iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus),\n          refreshTokenState: types_1.RefreshTokenState.IN_PROGRESS,\n          civicPass: Object.assign(Object.assign({}, state.civicPass), {\n            responsePayload: {\n              [types_1.CivicPassMessageAction.REFRESH]: {\n                payload,\n                requiresProofOfWalletOwnership: shouldRequestPowo\n              }\n            }\n          })\n        });\n      }\n\n    case 'civicPass_refresh_cancelled':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        refreshTokenState: types_1.RefreshTokenState.CANCELLED,\n        gatewayStatus: types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED\n      });\n\n    case 'civicPass_refresh_failure':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        refreshTokenState: types_1.RefreshTokenState.FAILED,\n        gatewayStatus: types_1.GatewayStatus.ERROR,\n        civicPass: Object.assign(Object.assign({}, state.civicPass), {\n          responsePayload: undefined\n        })\n      });\n\n    case 'civicPass_location_not_supported':\n      return Object.assign(Object.assign({}, state), {\n        iframeMinimized: true,\n        renderIframe: false,\n        gatewayStatus: state.gatewayStatus,\n        refreshTokenState: state.gatekeeperRecordState === types_1.GatekeeperAPIStatus.ISSUED_LOCATION_NOT_SUPPORTED ? types_1.RefreshTokenState.REQUIRES_POWO : state.refreshTokenState\n      });\n\n    case 'civicPass_vpn_not_supported':\n      return Object.assign(Object.assign({}, state), {\n        iframeMinimized: true,\n        renderIframe: false,\n        gatewayStatus: state.gatewayStatus\n      });\n\n    case 'civicPass_awaiting_owner_transaction':\n      return Object.assign(Object.assign({}, state), {\n        iframeMinimized: false,\n        renderIframe: true,\n        gatewayStatus: types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION,\n        iframeSrcUrl: getCivicPassSrcUrl(state, types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION)\n      });\n\n    case 'civicPass_owner_transaction_timeout':\n      return Object.assign(Object.assign({}, state), {\n        iframeMinimized: false,\n        renderIframe: true,\n        gatewayStatus: types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR,\n        iframeSrcUrl: getCivicPassSrcUrl(state, types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexports.reducer = reducer;\n\nconst useCivicPass = (_ref, state, dispatch) => {\n  let {\n    wallet\n  } = _ref;\n  const {\n    gatekeeperRecordState\n  } = state;\n\n  const getActionForIssuanceResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_issuance_success',\n        payload: response\n      },\n      [types_1.CivicPassMessageEventResult.FAILURE]: {\n        type: 'civicPass_issuance_failure'\n      },\n      [types_1.CivicPassMessageEventResult.CANCELLED]: {\n        type: 'civicPass_issuance_cancelled'\n      },\n      [types_1.CivicPassMessageEventResult.IN_PROGRESS]: {\n        type: 'civicPass_in_progress'\n      }\n    };\n    return actions[response.event];\n  };\n\n  const getActionForRefreshResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_refresh_success',\n        payload: response\n      },\n      [types_1.CivicPassMessageEventResult.CANCELLED]: {\n        type: 'civicPass_refresh_cancelled'\n      },\n      [types_1.CivicPassMessageEventResult.FAILURE]: {\n        type: 'civicPass_refresh_failure'\n      }\n    };\n    return actions[response.event];\n  };\n\n  const getActionForPowoResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'powoComplete'\n      }\n    };\n    return actions[response.event];\n  };\n\n  const getActionForLocationNotSupportedResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_location_not_supported'\n      }\n    };\n    return actions[response.event];\n  };\n\n  const getActionForVpnNotSupportedResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_vpn_not_supported'\n      }\n    };\n    return actions[response.event];\n  };\n\n  const getActionForStaticResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_close'\n      },\n      [types_1.CivicPassMessageEventResult.FAILURE]: {\n        type: 'civicPass_error_user_retry'\n      }\n    };\n    const returnAction = actions[response.event];\n    return returnAction;\n  };\n\n  const getActionForStatusResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_check_status_complete',\n        payload: response\n      }\n    };\n    return actions[response.event];\n  };\n\n  const dispatchComplianceEventResult = response => {\n    const actions = {\n      [types_1.CivicPassMessageAction.ISSUANCE]: getActionForIssuanceResponse(response),\n      [types_1.CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP]: getActionForPowoResponse(response),\n      [types_1.CivicPassMessageAction.TOKEN_IN_REVIEW]: getActionForStaticResponse(response),\n      [types_1.CivicPassMessageAction.TOKEN_ACTIVE]: getActionForStaticResponse(response),\n      [types_1.CivicPassMessageAction.TOKEN_FROZEN]: getActionForStaticResponse(response),\n      [types_1.CivicPassMessageAction.TOKEN_REJECTED]: getActionForStaticResponse(response),\n      [types_1.CivicPassMessageAction.TOKEN_REVOKED]: getActionForStaticResponse(response),\n      [types_1.CivicPassMessageAction.FAILED_IP_CHECK]: getActionForLocationNotSupportedResponse(response),\n      [types_1.CivicPassMessageAction.FAILED_VPN_CHECK]: getActionForVpnNotSupportedResponse(response),\n      [types_1.CivicPassMessageAction.REFRESH]: getActionForRefreshResponse(response),\n      [types_1.CivicPassMessageAction.STATUS]: getActionForStatusResponse(response),\n      [types_1.CivicPassMessageAction.ERROR]: getActionForStaticResponse(response),\n      [types_1.CivicPassMessageAction.CHAIN_ERROR]: getActionForStaticResponse(response)\n    };\n    const action = actions[response.action];\n\n    if (action) {\n      logDebug('Successfully processed compliance event with action', action);\n      dispatch(action);\n    }\n  };\n  /**\n   * Listen for post messages from the compliance iframe and dispatch events\n   * based on the event type\n   */\n\n\n  (0, react_1.useEffect)(() => {\n    if (wallet && wallet.publicKey) {\n      logDebug('Current state', state);\n\n      const handler = async response => {\n        dispatchComplianceEventResult(response.data);\n      };\n\n      window.addEventListener('message', handler);\n      return () => {\n        logDebug('Removing event listener for compliance');\n        return window.removeEventListener('message', handler);\n      };\n    }\n\n    return () => {};\n  }, []);\n  /**\n   * We do not have a token and user is connecting from an unsupported country,\n   * so we show the country not supported screen\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (gatekeeperRecordState === types_1.GatekeeperAPIStatus.LOCATION_NOT_SUPPORTED || gatekeeperRecordState === types_1.GatekeeperAPIStatus.VPN_NOT_SUPPORTED) {\n      dispatch({\n        type: 'civicPass_check_token_status'\n      });\n    }\n  }, [gatekeeperRecordState]);\n  /**\n   * Check for the ongoing KYC status\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (gatekeeperRecordState === types_1.GatekeeperAPIStatus.NOT_REQUESTED) {\n      dispatch({\n        type: 'civicPass_check_status'\n      });\n    }\n  }, [gatekeeperRecordState]);\n  return {\n    dispatchComplianceEventResult\n  };\n};\n\nexports.default = useCivicPass;","map":{"version":3,"sources":["/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@civic/common-gateway-react/dist/esm/useHooks/useCivicPass.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","reducer","react_1","require","status_1","logger_1","types_1","config_1","utils_1","gatewayStatusToCivicPassAction","GatewayStatus","PROOF_OF_WALLET_OWNERSHIP","CivicPassMessageAction","IN_REVIEW","TOKEN_IN_REVIEW","ERROR","ACTIVE","TOKEN_ACTIVE","REVOKED","TOKEN_REVOKED","FROZEN","TOKEN_FROZEN","REJECTED","TOKEN_REJECTED","LOCATION_NOT_SUPPORTED","FAILED_IP_CHECK","VPN_NOT_SUPPORTED","FAILED_VPN_CHECK","REFRESH_TOKEN_REQUIRED","REFRESH","CHECKING","STATUS","NOT_REQUESTED","ISSUANCE","COLLECTING_USER_INFORMATION","VALIDATING_USER_INFORMATION","USER_INFORMATION_VALIDATED","USER_INFORMATION_REJECTED","ExtendedGatewayStatus","AWAITING_OWNER_TRANSACTION","AWAITING_TRANSACTION_CONFIRMATION","CHAIN_TIMEOUT_ERROR","CHAIN_ERROR","validationProcessToGatewayStatus","ValidationStatus","COLLECTING","PROCESSING","FAILED","NOT_FOUND","COMPLETED","logDebug","message","obj","default","debug","logError","error","getCivicPassSrcUrl","state","status","redirectUrl","gatekeeperNetworkAddress","stage","walletAddress","civicPass","chainType","ownerSigns","Error","civicPassSrcUrl","getCivicPassEndpoint","url","URL","action","searchParams","URLSearchParams","assign","requestPayload","networkAddress","wallet","chain","toString","gatewayStatus","statusDisplayValue","href","_a","type","iframeMinimized","options","autoShowModal","renderIframe","iframeSrcUrl","CivicPassIssuanceStatus","REQUESTED","statusFromToken","token","payload","requiresRefresh","refreshTokenState","RefreshTokenState","requiresProofOfWalletOwnership","shouldRequestPowo","powoRequested","VERIFIED","responsePayload","resetState","NOT_REQUIRED","IN_PROGRESS","CANCELLED","undefined","gatekeeperRecordState","GatekeeperAPIStatus","ISSUED_LOCATION_NOT_SUPPORTED","REQUIRES_POWO","useCivicPass","dispatch","getActionForIssuanceResponse","response","actions","CivicPassMessageEventResult","SUCCESS","FAILURE","event","getActionForRefreshResponse","getActionForPowoResponse","getActionForLocationNotSupportedResponse","getActionForVpnNotSupportedResponse","getActionForStaticResponse","returnAction","getActionForStatusResponse","dispatchComplianceEventResult","useEffect","publicKey","handler","data","window","addEventListener","removeEventListener"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAME,QAAQ,GAAGX,eAAe,CAACS,OAAO,CAAC,WAAD,CAAR,CAAhC;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,qBAAD,CAAvB;;AACA,MAAMM,8BAA8B,GAAG;AACnC,GAACH,OAAO,CAACI,aAAR,CAAsBC,yBAAvB,GAAmDL,OAAO,CAACM,sBAAR,CAA+BD,yBAD/C;AAEnC,GAACL,OAAO,CAACI,aAAR,CAAsBG,SAAvB,GAAmCP,OAAO,CAACM,sBAAR,CAA+BE,eAF/B;AAGnC,GAACR,OAAO,CAACI,aAAR,CAAsBK,KAAvB,GAA+BT,OAAO,CAACM,sBAAR,CAA+BG,KAH3B;AAInC,GAACT,OAAO,CAACI,aAAR,CAAsBM,MAAvB,GAAgCV,OAAO,CAACM,sBAAR,CAA+BK,YAJ5B;AAKnC,GAACX,OAAO,CAACI,aAAR,CAAsBQ,OAAvB,GAAiCZ,OAAO,CAACM,sBAAR,CAA+BO,aAL7B;AAMnC,GAACb,OAAO,CAACI,aAAR,CAAsBU,MAAvB,GAAgCd,OAAO,CAACM,sBAAR,CAA+BS,YAN5B;AAOnC,GAACf,OAAO,CAACI,aAAR,CAAsBY,QAAvB,GAAkChB,OAAO,CAACM,sBAAR,CAA+BW,cAP9B;AAQnC,GAACjB,OAAO,CAACI,aAAR,CAAsBc,sBAAvB,GAAgDlB,OAAO,CAACM,sBAAR,CAA+Ba,eAR5C;AASnC,GAACnB,OAAO,CAACI,aAAR,CAAsBgB,iBAAvB,GAA2CpB,OAAO,CAACM,sBAAR,CAA+Be,gBATvC;AAUnC,GAACrB,OAAO,CAACI,aAAR,CAAsBkB,sBAAvB,GAAgDtB,OAAO,CAACM,sBAAR,CAA+BiB,OAV5C;AAWnC,GAACvB,OAAO,CAACI,aAAR,CAAsBoB,QAAvB,GAAkCxB,OAAO,CAACM,sBAAR,CAA+BmB,MAX9B;AAYnC,GAACzB,OAAO,CAACI,aAAR,CAAsBsB,aAAvB,GAAuC1B,OAAO,CAACM,sBAAR,CAA+BqB,QAZnC;AAanC,GAAC3B,OAAO,CAACI,aAAR,CAAsBwB,2BAAvB,GAAqD5B,OAAO,CAACM,sBAAR,CAA+BqB,QAbjD;AAcnC,GAAC3B,OAAO,CAACI,aAAR,CAAsByB,2BAAvB,GAAqD7B,OAAO,CAACM,sBAAR,CAA+BqB,QAdjD;AAenC,GAAC3B,OAAO,CAACI,aAAR,CAAsB0B,0BAAvB,GAAoD9B,OAAO,CAACM,sBAAR,CAA+BqB,QAfhD;AAgBnC,GAAC3B,OAAO,CAACI,aAAR,CAAsB2B,yBAAvB,GAAmD/B,OAAO,CAACM,sBAAR,CAA+BqB,QAhB/C;AAiBnC,GAAC3B,OAAO,CAACgC,qBAAR,CAA8BC,0BAA/B,GAA4DjC,OAAO,CAACM,sBAAR,CAA+B4B,iCAjBxD;AAkBnC,GAAClC,OAAO,CAACgC,qBAAR,CAA8BG,mBAA/B,GAAqDnC,OAAO,CAACM,sBAAR,CAA+B8B;AAlBjD,CAAvC;AAoBA,MAAMC,gCAAgC,GAAG;AACrC,GAACrC,OAAO,CAACsC,gBAAR,CAAyBC,UAA1B,GAAuCvC,OAAO,CAACI,aAAR,CAAsBwB,2BADxB;AAErC,GAAC5B,OAAO,CAACsC,gBAAR,CAAyBE,UAA1B,GAAuCxC,OAAO,CAACI,aAAR,CAAsByB,2BAFxB;AAGrC,GAAC7B,OAAO,CAACsC,gBAAR,CAAyB/B,SAA1B,GAAsCP,OAAO,CAACI,aAAR,CAAsByB,2BAHvB;AAIrC,GAAC7B,OAAO,CAACsC,gBAAR,CAAyBG,MAA1B,GAAmCzC,OAAO,CAACI,aAAR,CAAsB2B,yBAJpB;AAKrC,GAAC/B,OAAO,CAACsC,gBAAR,CAAyBI,SAA1B,GAAsC1C,OAAO,CAACI,aAAR,CAAsBsB,aALvB;AAMrC,GAAC1B,OAAO,CAACsC,gBAAR,CAAyBK,SAA1B,GAAsC3C,OAAO,CAACI,aAAR,CAAsB0B;AANvB,CAAzC;;AAQA,MAAMc,QAAQ,GAAG,UAACC,OAAD;AAAA,MAAUC,GAAV,uEAAgB,IAAhB;AAAA,SAAyB/C,QAAQ,CAACgD,OAAT,CAAiBC,KAAjB,CAAwB,kBAAiBH,OAAQ,EAAjD,EAAoDC,GAApD,CAAzB;AAAA,CAAjB;;AACA,MAAMG,QAAQ,GAAG,UAACJ,OAAD;AAAA,MAAUC,GAAV,uEAAgB,IAAhB;AAAA,SAAyB/C,QAAQ,CAACgD,OAAT,CAAiBG,KAAjB,CAAwB,kBAAiBL,OAAQ,EAAjD,EAAoDC,GAApD,CAAzB;AAAA,CAAjB,C,CACA;;;AACA,MAAMK,kBAAkB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1C,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,wBAAf;AAAyCC,IAAAA,KAAzC;AAAgDC,IAAAA,aAAhD;AAA+DC,IAAAA,SAA/D;AAA0EC,IAAAA,SAA1E;AAAqFC,IAAAA;AAArF,MAAoGR,KAA1G;;AACA,MAAI,CAACG,wBAAD,IAA6B,CAACE,aAAlC,EAAiD;AAC7CR,IAAAA,QAAQ,CAAC,iCAAD,EAAoC;AAAEM,MAAAA,wBAAF;AAA4BE,MAAAA;AAA5B,KAApC,CAAR;AACA,UAAM,IAAII,KAAJ,CAAW,mCAAkC;AAAEN,MAAAA,wBAAF;AAA4BE,MAAAA;AAA5B,KAA4C,EAAzF,CAAN;AACH;;AACD,QAAMK,eAAe,GAAG,CAAC,GAAG7D,QAAQ,CAAC8D,oBAAb,EAAmCP,KAAnC,CAAxB;AACA,QAAMQ,GAAG,GAAG,IAAIC,GAAJ,CAAQH,eAAR,CAAZ;AACA,QAAMI,MAAM,GAAG/D,8BAA8B,CAACkD,MAAD,CAA7C;AACA,QAAMc,YAAY,GAAG,IAAIC,eAAJ,CAAoB7E,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBX,SAAS,CAACY,cAA5B,CAAd,EAA2D;AAAEhB,IAAAA,WAAF;AAAeiB,IAAAA,cAAc,EAAEhB,wBAA/B;AAAyDW,IAAAA,MAAzD;AAAiEM,IAAAA,MAAM,EAAEf,aAAzE;AAAwFgB,IAAAA,KAAK,EAAEd,SAA/F;AAA0GC,IAAAA,UAAU,EAAEA,UAAU,GAAG,MAAH,GAAY;AAA5I,GAA3D,CAApB,CAArB;AACAhB,EAAAA,QAAQ,CAAC,yBAAD,EAA4B;AAChCuB,IAAAA,YAAY,EAAEA,YAAY,CAACO,QAAb,EADkB;AAEhCC,IAAAA,aAAa,EAAE,CAAC,GAAG7E,QAAQ,CAAC8E,kBAAb,EAAiCvB,MAAjC;AAFiB,GAA5B,CAAR;AAIA,SAAQ,GAAEW,GAAG,CAACa,IAAK,IAAGV,YAAY,CAACO,QAAb,EAAwB,EAA9C;AACH,CAfD;;AAgBA,MAAM/E,OAAO,GAAG,CAACyD,KAAD,EAAQc,MAAR,KAAmB;AAC/B,MAAIY,EAAJ;;AACA,UAAQZ,MAAM,CAACa,IAAf;AACI,SAAK,8BAAL;AAAqC;AACjC,eAAOxF,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;AAAE4B,UAAAA,eAAe,EAAE,EAAE,CAACF,EAAE,GAAG1B,KAAK,CAAC6B,OAAZ,MAAyB,IAAzB,IAAiCH,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACI,aAA/D,CAAnB;AAAkGC,UAAAA,YAAY,EAAE,IAAhH;AAAsHC,UAAAA,YAAY,EAAEhC,KAAK,CAACM,SAAN,CAAgBL,MAAhB,KAA2BrD,OAAO,CAACqF,uBAAR,CAAgCC,SAA3D,GACzKlC,KAAK,CAACgC,YADmK,GAEzKjC,kBAAkB,CAACC,KAAD,EAAQ,CAAC,GAAGlD,OAAO,CAACqF,eAAZ,EAA6BnC,KAA7B,EAAoCc,MAAM,CAACsB,KAA3C,CAAR;AAFmB,SAAxC,CAAP;AAGH;;AACD,SAAK,wBAAL;AAA+B;AAC3B,eAAOjG,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;AAAE4B,UAAAA,eAAe,EAAE,IAAnB;AAAyBG,UAAAA,YAAY,EAAE,IAAvC;AAA6CR,UAAAA,aAAa,EAAE3E,OAAO,CAACI,aAAR,CAAsBoB,QAAlF;AAA4F4D,UAAAA,YAAY,EAAEjC,kBAAkB,CAACC,KAAD,EAAQpD,OAAO,CAACI,aAAR,CAAsBoB,QAA9B;AAA5H,SAAxC,CAAP;AACH;;AACD,SAAK,iCAAL;AAAwC;AACpC,cAAM;AAAEiE,UAAAA;AAAF,YAAcvB,MAAM,CAACuB,OAA3B;AACA,cAAM;AAAEpC,UAAAA;AAAF,YAAaoC,OAAnB;AACA,cAAMd,aAAa,GAAGtC,gCAAgC,CAACgB,MAAD,CAAtD;AACA,eAAO9D,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;AAAE4B,UAAAA,eAAe,EAAE,IAAnB;AAAyBG,UAAAA,YAAY,EAAE,KAAvC;AAA8CR,UAAAA;AAA9C,SAAxC,CAAP;AACH;;AACD,SAAK,2CAAL;AAAkD;AAC9C,eAAOpF,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;AAAE4B,UAAAA,eAAe,EAAE,KAAnB;AAA0BG,UAAAA,YAAY,EAAE,IAAxC;AAA8CC,UAAAA,YAAY,EAAEhC,KAAK,CAACM,SAAN,CAAgBL,MAAhB,KAA2BrD,OAAO,CAACqF,uBAAR,CAAgCC,SAA3D,GACjGlC,KAAK,CAACgC,YAD2F,GAEjGjC,kBAAkB,CAACC,KAAD,EAAQ,CAAC,GAAGlD,OAAO,CAACqF,eAAZ,EAA6BnC,KAA7B,EAAoCc,MAAM,CAACsB,KAA3C,CAAR;AAFmB,SAAxC,CAAP;AAGH;;AACD,SAAK,iBAAL;AAAwB;AACpB,cAAM;AAAEb,UAAAA;AAAF,YAAoBvB,KAA1B;AACA,cAAMsC,eAAe,GAAGf,aAAa,KAAK3E,OAAO,CAACI,aAAR,CAAsBkB,sBAAxC,IACpBqD,aAAa,KAAK3E,OAAO,CAACI,aAAR,CAAsBC,yBAD5C,CAFoB,CAIpB;AACA;;AACA,cAAM8E,YAAY,GAAG/B,KAAK,CAACM,SAAN,CAAgBL,MAAhB,KAA2BrD,OAAO,CAACqF,uBAAR,CAAgCC,SAA3D,IACjBX,aAAa,KAAK3E,OAAO,CAACgC,qBAAR,CAA8BC,0BADpD;AAEA,eAAO1C,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAmBc,YAAY,GAChC5F,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;AAAE4B,UAAAA,eAAe,EAAE,IAAnB;AAAyBG,UAAAA;AAAzB,SAAxC,CADgC,GACmD5F,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;AAAE4B,UAAAA,eAAe,EAAE,IAAnB;AAAyBG,UAAAA,YAAzB;AAAuCQ,UAAAA,iBAAiB,EAAED,eAAe,GAAGtC,KAAK,CAACuC,iBAAT,GAA6B3F,OAAO,CAAC4F,iBAAR,CAA0BjD;AAAhI,SAAxC,CADlF,CAAP;AAEH;;AACD,SAAK,uBAAL;AAA8B;AAC1B,eAAOpD,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;AAAEuB,UAAAA,aAAa,EAAE3E,OAAO,CAACI,aAAR,CAAsBwB,2BAAvC;AAAoEuD,UAAAA,YAAY,EAAE,IAAlF;AAAwFH,UAAAA,eAAe,EAAE,KAAzG;AAAgHtB,UAAAA,SAAS,EAAEnE,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAK,CAACM,SAAxB,CAAd,EAAkD;AAAEL,YAAAA,MAAM,EAAErD,OAAO,CAACqF,uBAAR,CAAgCC;AAA1C,WAAlD;AAA3H,SAAxC,CAAP;AACH;;AACD,SAAK,4BAAL;AAAmC;AAC/B,cAAM;AAAE1B,UAAAA;AAAF,YAAiBR,KAAvB;AACA,cAAM;AAAEqC,UAAAA,OAAF;AAAWI,UAAAA;AAAX,YAA8C3B,MAAM,CAACuB,OAA3D;AACA,cAAMK,iBAAiB,GAAGlC,UAAU,GAAG,KAAH,GAAWiC,8BAA/C;AACA,cAAMlB,aAAa,GAAGmB,iBAAiB,GAAG9F,OAAO,CAACI,aAAR,CAAsBC,yBAAzB,GAAqDL,OAAO,CAACI,aAAR,CAAsBG,SAAlH;AACA,eAAOhB,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;AAAEuB,UAAAA,aAAF;AAAiBQ,UAAAA,YAAY,EAAE,CAACvB,UAAhC;AAA4CoB,UAAAA,eAAe,EAAEpB,UAA7D;AAAyEmC,UAAAA,aAAa,EAAE,QAAxF;AAAkGX,UAAAA,YAAY,EAAEjC,kBAAkB,CAACC,KAAD,EAAQuB,aAAR,CAAlI;AAA0JjB,UAAAA,SAAS,EAAEnE,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAK,CAACM,SAAxB,CAAd,EAAkD;AAAEL,YAAAA,MAAM,EAAErD,OAAO,CAACqF,uBAAR,CAAgCW,QAA1C;AAAoDC,YAAAA,eAAe,EAAE;AAC/T,eAACjG,OAAO,CAACM,sBAAR,CAA+BqB,QAAhC,GAA2C;AACvC8D,gBAAAA,OADuC;AAEvCI,gBAAAA,8BAA8B,EAAEC;AAFO;AADoR;AAArE,WAAlD;AAArK,SAAxC,CAAP;AAMH;;AACD,SAAK,4BAAL;AACI,aAAOvG,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkB,CAAC,GAAGnE,OAAO,CAACgG,UAAZ,EAAwB9C,KAAxB,CAAlB,CAAd,EAAiE;AAAE4B,QAAAA,eAAe,EAAE,KAAnB;AAA0BG,QAAAA,YAAY,EAAE,IAAxC;AAA8CR,QAAAA,aAAa,EAAE3E,OAAO,CAACI,aAAR,CAAsBK;AAAnF,OAAjE,CAAP;;AACJ,SAAK,uCAAL;AACI,aAAOlB,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkB,CAAC,GAAGnE,OAAO,CAACgG,UAAZ,EAAwB9C,KAAxB,CAAlB,CAAd,EAAiE;AAAEuC,QAAAA,iBAAiB,EAAE3F,OAAO,CAAC4F,iBAAR,CAA0BO,YAA/C;AAA6DnB,QAAAA,eAAe,EAAE,KAA9E;AAAqFG,QAAAA,YAAY,EAAE,IAAnG;AAAyGR,QAAAA,aAAa,EAAE3E,OAAO,CAACI,aAAR,CAAsBK,KAA9I;AAAqJ2E,QAAAA,YAAY,EAAEjC,kBAAkB,CAACC,KAAD,EAAQpD,OAAO,CAACI,aAAR,CAAsBK,KAA9B;AAArL,OAAjE,CAAP;;AACJ,SAAK,4BAAL;AACI,aAAOlB,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkB,CAAC,GAAGnE,OAAO,CAACgG,UAAZ,EAAwB9C,KAAxB,CAAlB,CAAd,EAAiE;AAAE4B,QAAAA,eAAe,EAAE,KAAnB;AAA0BG,QAAAA,YAAY,EAAE,IAAxC;AAA8CR,QAAAA,aAAa,EAAE3E,OAAO,CAACI,aAAR,CAAsBsB,aAAnF;AAAkG0D,QAAAA,YAAY,EAAEjC,kBAAkB,CAACC,KAAD,EAAQpD,OAAO,CAACI,aAAR,CAAsBsB,aAA9B;AAAlI,OAAjE,CAAP;;AACJ,SAAK,8BAAL;AACI,aAAOnC,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkB,CAAC,GAAGnE,OAAO,CAACgG,UAAZ,EAAwB9C,KAAxB,CAAlB,CAAd,EAAiE;AAAEuB,QAAAA,aAAa,EAAE3E,OAAO,CAACI,aAAR,CAAsBsB;AAAvC,OAAjE,CAAP;;AACJ,SAAK,2BAAL;AAAkC;AAC9B,cAAM;AAAEkC,UAAAA;AAAF,YAAiBR,KAAvB;AACA,cAAM;AAAEqC,UAAAA,OAAF;AAAWI,UAAAA;AAAX,YAA8C3B,MAAM,CAACuB,OAA3D;AACA,cAAMK,iBAAiB,GAAGlC,UAAU,GAAG,KAAH,GAAWiC,8BAA/C;AACA,cAAMlB,aAAa,GAAGmB,iBAAiB,GAAG9F,OAAO,CAACI,aAAR,CAAsBC,yBAAzB,GAAqDL,OAAO,CAACI,aAAR,CAAsBG,SAAlH;AACA,eAAOhB,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;AAAEuB,UAAAA,aAAF;AAAiBQ,UAAAA,YAAY,EAAE,CAACvB,UAAhC;AAA4CoB,UAAAA,eAAe,EAAEpB,UAA7D;AAAyEwB,UAAAA,YAAY,EAAEjC,kBAAkB,CAACC,KAAD,EAAQuB,aAAR,CAAzG;AAAiIgB,UAAAA,iBAAiB,EAAE3F,OAAO,CAAC4F,iBAAR,CAA0BQ,WAA9K;AAA2L1C,UAAAA,SAAS,EAAEnE,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAK,CAACM,SAAxB,CAAd,EAAkD;AAAEuC,YAAAA,eAAe,EAAE;AAC9S,eAACjG,OAAO,CAACM,sBAAR,CAA+BiB,OAAhC,GAA0C;AACtCkE,gBAAAA,OADsC;AAEtCI,gBAAAA,8BAA8B,EAAEC;AAFM;AADoQ;AAAnB,WAAlD;AAAtM,SAAxC,CAAP;AAMH;;AACD,SAAK,6BAAL;AACI,aAAOvG,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkB,CAAC,GAAGnE,OAAO,CAACgG,UAAZ,EAAwB9C,KAAxB,CAAlB,CAAd,EAAiE;AAAEuC,QAAAA,iBAAiB,EAAE3F,OAAO,CAAC4F,iBAAR,CAA0BS,SAA/C;AAA0D1B,QAAAA,aAAa,EAAE3E,OAAO,CAACI,aAAR,CAAsBkB;AAA/F,OAAjE,CAAP;;AACJ,SAAK,2BAAL;AACI,aAAO/B,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkB,CAAC,GAAGnE,OAAO,CAACgG,UAAZ,EAAwB9C,KAAxB,CAAlB,CAAd,EAAiE;AAAEuC,QAAAA,iBAAiB,EAAE3F,OAAO,CAAC4F,iBAAR,CAA0BnD,MAA/C;AAAuDkC,QAAAA,aAAa,EAAE3E,OAAO,CAACI,aAAR,CAAsBK,KAA5F;AAAmGiD,QAAAA,SAAS,EAAEnE,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAK,CAACM,SAAxB,CAAd,EAAkD;AAAEuC,UAAAA,eAAe,EAAEK;AAAnB,SAAlD;AAA9G,OAAjE,CAAP;;AACJ,SAAK,kCAAL;AACI,aAAO/G,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;AAAE4B,QAAAA,eAAe,EAAE,IAAnB;AAAyBG,QAAAA,YAAY,EAAE,KAAvC;AAA8CR,QAAAA,aAAa,EAAEvB,KAAK,CAACuB,aAAnE;AAAkFgB,QAAAA,iBAAiB,EAAEvC,KAAK,CAACmD,qBAAN,KAAgCvG,OAAO,CAACwG,mBAAR,CAA4BC,6BAA5D,GAC1IzG,OAAO,CAAC4F,iBAAR,CAA0Bc,aADgH,GAE1ItD,KAAK,CAACuC;AAF+B,OAAxC,CAAP;;AAGJ,SAAK,6BAAL;AACI,aAAOpG,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;AAAE4B,QAAAA,eAAe,EAAE,IAAnB;AAAyBG,QAAAA,YAAY,EAAE,KAAvC;AAA8CR,QAAAA,aAAa,EAAEvB,KAAK,CAACuB;AAAnE,OAAxC,CAAP;;AACJ,SAAK,sCAAL;AACI,aAAOpF,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;AAAE4B,QAAAA,eAAe,EAAE,KAAnB;AAA0BG,QAAAA,YAAY,EAAE,IAAxC;AAA8CR,QAAAA,aAAa,EAAE3E,OAAO,CAACgC,qBAAR,CAA8BC,0BAA3F;AAAuHmD,QAAAA,YAAY,EAAEjC,kBAAkB,CAACC,KAAD,EAAQpD,OAAO,CAACgC,qBAAR,CAA8BC,0BAAtC;AAAvJ,OAAxC,CAAP;;AACJ,SAAK,qCAAL;AACI,aAAO1C,MAAM,CAAC8E,MAAP,CAAc9E,MAAM,CAAC8E,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAd,EAAwC;AAAE4B,QAAAA,eAAe,EAAE,KAAnB;AAA0BG,QAAAA,YAAY,EAAE,IAAxC;AAA8CR,QAAAA,aAAa,EAAE3E,OAAO,CAACgC,qBAAR,CAA8BG,mBAA3F;AAAgHiD,QAAAA,YAAY,EAAEjC,kBAAkB,CAACC,KAAD,EAAQpD,OAAO,CAACgC,qBAAR,CAA8BG,mBAAtC;AAAhJ,OAAxC,CAAP;;AACJ;AACI,aAAOiB,KAAP;AAjFR;AAmFH,CArFD;;AAsFA3D,OAAO,CAACE,OAAR,GAAkBA,OAAlB;;AACA,MAAMgH,YAAY,GAAG,OAAavD,KAAb,EAAoBwD,QAApB,KAAiC;AAAA,MAAhC;AAAEpC,IAAAA;AAAF,GAAgC;AAClD,QAAM;AAAE+B,IAAAA;AAAF,MAA4BnD,KAAlC;;AACA,QAAMyD,4BAA4B,GAAIC,QAAD,IAAc;AAC/C,UAAMC,OAAO,GAAG;AACZ,OAAC/G,OAAO,CAACgH,2BAAR,CAAoCC,OAArC,GAA+C;AAC3ClC,QAAAA,IAAI,EAAE,4BADqC;AAE3CU,QAAAA,OAAO,EAAEqB;AAFkC,OADnC;AAKZ,OAAC9G,OAAO,CAACgH,2BAAR,CAAoCE,OAArC,GAA+C;AAC3CnC,QAAAA,IAAI,EAAE;AADqC,OALnC;AAQZ,OAAC/E,OAAO,CAACgH,2BAAR,CAAoCX,SAArC,GAAiD;AAC7CtB,QAAAA,IAAI,EAAE;AADuC,OARrC;AAWZ,OAAC/E,OAAO,CAACgH,2BAAR,CAAoCZ,WAArC,GAAmD;AAC/CrB,QAAAA,IAAI,EAAE;AADyC;AAXvC,KAAhB;AAeA,WAAOgC,OAAO,CAACD,QAAQ,CAACK,KAAV,CAAd;AACH,GAjBD;;AAkBA,QAAMC,2BAA2B,GAAIN,QAAD,IAAc;AAC9C,UAAMC,OAAO,GAAG;AACZ,OAAC/G,OAAO,CAACgH,2BAAR,CAAoCC,OAArC,GAA+C;AAC3ClC,QAAAA,IAAI,EAAE,2BADqC;AAE3CU,QAAAA,OAAO,EAAEqB;AAFkC,OADnC;AAKZ,OAAC9G,OAAO,CAACgH,2BAAR,CAAoCX,SAArC,GAAiD;AAC7CtB,QAAAA,IAAI,EAAE;AADuC,OALrC;AAQZ,OAAC/E,OAAO,CAACgH,2BAAR,CAAoCE,OAArC,GAA+C;AAC3CnC,QAAAA,IAAI,EAAE;AADqC;AARnC,KAAhB;AAYA,WAAOgC,OAAO,CAACD,QAAQ,CAACK,KAAV,CAAd;AACH,GAdD;;AAeA,QAAME,wBAAwB,GAAIP,QAAD,IAAc;AAC3C,UAAMC,OAAO,GAAG;AACZ,OAAC/G,OAAO,CAACgH,2BAAR,CAAoCC,OAArC,GAA+C;AAC3ClC,QAAAA,IAAI,EAAE;AADqC;AADnC,KAAhB;AAKA,WAAOgC,OAAO,CAACD,QAAQ,CAACK,KAAV,CAAd;AACH,GAPD;;AAQA,QAAMG,wCAAwC,GAAIR,QAAD,IAAc;AAC3D,UAAMC,OAAO,GAAG;AACZ,OAAC/G,OAAO,CAACgH,2BAAR,CAAoCC,OAArC,GAA+C;AAC3ClC,QAAAA,IAAI,EAAE;AADqC;AADnC,KAAhB;AAKA,WAAOgC,OAAO,CAACD,QAAQ,CAACK,KAAV,CAAd;AACH,GAPD;;AAQA,QAAMI,mCAAmC,GAAIT,QAAD,IAAc;AACtD,UAAMC,OAAO,GAAG;AACZ,OAAC/G,OAAO,CAACgH,2BAAR,CAAoCC,OAArC,GAA+C;AAC3ClC,QAAAA,IAAI,EAAE;AADqC;AADnC,KAAhB;AAKA,WAAOgC,OAAO,CAACD,QAAQ,CAACK,KAAV,CAAd;AACH,GAPD;;AAQA,QAAMK,0BAA0B,GAAIV,QAAD,IAAc;AAC7C,UAAMC,OAAO,GAAG;AACZ,OAAC/G,OAAO,CAACgH,2BAAR,CAAoCC,OAArC,GAA+C;AAC3ClC,QAAAA,IAAI,EAAE;AADqC,OADnC;AAIZ,OAAC/E,OAAO,CAACgH,2BAAR,CAAoCE,OAArC,GAA+C;AAC3CnC,QAAAA,IAAI,EAAE;AADqC;AAJnC,KAAhB;AAQA,UAAM0C,YAAY,GAAGV,OAAO,CAACD,QAAQ,CAACK,KAAV,CAA5B;AACA,WAAOM,YAAP;AACH,GAXD;;AAYA,QAAMC,0BAA0B,GAAIZ,QAAD,IAAc;AAC7C,UAAMC,OAAO,GAAG;AACZ,OAAC/G,OAAO,CAACgH,2BAAR,CAAoCC,OAArC,GAA+C;AAC3ClC,QAAAA,IAAI,EAAE,iCADqC;AAE3CU,QAAAA,OAAO,EAAEqB;AAFkC;AADnC,KAAhB;AAMA,WAAOC,OAAO,CAACD,QAAQ,CAACK,KAAV,CAAd;AACH,GARD;;AASA,QAAMQ,6BAA6B,GAAIb,QAAD,IAAc;AAChD,UAAMC,OAAO,GAAG;AACZ,OAAC/G,OAAO,CAACM,sBAAR,CAA+BqB,QAAhC,GAA2CkF,4BAA4B,CAACC,QAAD,CAD3D;AAEZ,OAAC9G,OAAO,CAACM,sBAAR,CAA+BD,yBAAhC,GAA4DgH,wBAAwB,CAACP,QAAD,CAFxE;AAGZ,OAAC9G,OAAO,CAACM,sBAAR,CAA+BE,eAAhC,GAAkDgH,0BAA0B,CAACV,QAAD,CAHhE;AAIZ,OAAC9G,OAAO,CAACM,sBAAR,CAA+BK,YAAhC,GAA+C6G,0BAA0B,CAACV,QAAD,CAJ7D;AAKZ,OAAC9G,OAAO,CAACM,sBAAR,CAA+BS,YAAhC,GAA+CyG,0BAA0B,CAACV,QAAD,CAL7D;AAMZ,OAAC9G,OAAO,CAACM,sBAAR,CAA+BW,cAAhC,GAAiDuG,0BAA0B,CAACV,QAAD,CAN/D;AAOZ,OAAC9G,OAAO,CAACM,sBAAR,CAA+BO,aAAhC,GAAgD2G,0BAA0B,CAACV,QAAD,CAP9D;AAQZ,OAAC9G,OAAO,CAACM,sBAAR,CAA+Ba,eAAhC,GAAkDmG,wCAAwC,CAACR,QAAD,CAR9E;AASZ,OAAC9G,OAAO,CAACM,sBAAR,CAA+Be,gBAAhC,GAAmDkG,mCAAmC,CAACT,QAAD,CAT1E;AAUZ,OAAC9G,OAAO,CAACM,sBAAR,CAA+BiB,OAAhC,GAA0C6F,2BAA2B,CAACN,QAAD,CAVzD;AAWZ,OAAC9G,OAAO,CAACM,sBAAR,CAA+BmB,MAAhC,GAAyCiG,0BAA0B,CAACZ,QAAD,CAXvD;AAYZ,OAAC9G,OAAO,CAACM,sBAAR,CAA+BG,KAAhC,GAAwC+G,0BAA0B,CAACV,QAAD,CAZtD;AAaZ,OAAC9G,OAAO,CAACM,sBAAR,CAA+B8B,WAAhC,GAA8CoF,0BAA0B,CAACV,QAAD;AAb5D,KAAhB;AAeA,UAAM5C,MAAM,GAAG6C,OAAO,CAACD,QAAQ,CAAC5C,MAAV,CAAtB;;AACA,QAAIA,MAAJ,EAAY;AACRtB,MAAAA,QAAQ,CAAC,qDAAD,EAAwDsB,MAAxD,CAAR;AACA0C,MAAAA,QAAQ,CAAC1C,MAAD,CAAR;AACH;AACJ,GArBD;AAsBA;AACJ;AACA;AACA;;;AACI,GAAC,GAAGtE,OAAO,CAACgI,SAAZ,EAAuB,MAAM;AACzB,QAAIpD,MAAM,IAAIA,MAAM,CAACqD,SAArB,EAAgC;AAC5BjF,MAAAA,QAAQ,CAAC,eAAD,EAAkBQ,KAAlB,CAAR;;AACA,YAAM0E,OAAO,GAAG,MAAOhB,QAAP,IAAoB;AAChCa,QAAAA,6BAA6B,CAACb,QAAQ,CAACiB,IAAV,CAA7B;AACH,OAFD;;AAGAC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCH,OAAnC;AACA,aAAO,MAAM;AACTlF,QAAAA,QAAQ,CAAC,wCAAD,CAAR;AACA,eAAOoF,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCJ,OAAtC,CAAP;AACH,OAHD;AAIH;;AACD,WAAO,MAAM,CAAG,CAAhB;AACH,GAbD,EAaG,EAbH;AAcA;AACJ;AACA;AACA;;AACI,GAAC,GAAGlI,OAAO,CAACgI,SAAZ,EAAuB,MAAM;AACzB,QAAIrB,qBAAqB,KAAKvG,OAAO,CAACwG,mBAAR,CAA4BtF,sBAAtD,IACAqF,qBAAqB,KAAKvG,OAAO,CAACwG,mBAAR,CAA4BpF,iBAD1D,EAC6E;AACzEwF,MAAAA,QAAQ,CAAC;AAAE7B,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACH;AACJ,GALD,EAKG,CAACwB,qBAAD,CALH;AAMA;AACJ;AACA;;AACI,GAAC,GAAG3G,OAAO,CAACgI,SAAZ,EAAuB,MAAM;AACzB,QAAIrB,qBAAqB,KAAKvG,OAAO,CAACwG,mBAAR,CAA4B9E,aAA1D,EAAyE;AACrEkF,MAAAA,QAAQ,CAAC;AAAE7B,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACH;AACJ,GAJD,EAIG,CAACwB,qBAAD,CAJH;AAKA,SAAO;AAAEoB,IAAAA;AAAF,GAAP;AACH,CA3ID;;AA4IAlI,OAAO,CAACsD,OAAR,GAAkB4D,YAAlB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reducer = void 0;\nconst react_1 = require(\"react\");\nconst status_1 = require(\"../utils/status\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst types_1 = require(\"../types\");\nconst config_1 = require(\"../config\");\nconst utils_1 = require(\"../useReducer/utils\");\nconst gatewayStatusToCivicPassAction = {\n    [types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP]: types_1.CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP,\n    [types_1.GatewayStatus.IN_REVIEW]: types_1.CivicPassMessageAction.TOKEN_IN_REVIEW,\n    [types_1.GatewayStatus.ERROR]: types_1.CivicPassMessageAction.ERROR,\n    [types_1.GatewayStatus.ACTIVE]: types_1.CivicPassMessageAction.TOKEN_ACTIVE,\n    [types_1.GatewayStatus.REVOKED]: types_1.CivicPassMessageAction.TOKEN_REVOKED,\n    [types_1.GatewayStatus.FROZEN]: types_1.CivicPassMessageAction.TOKEN_FROZEN,\n    [types_1.GatewayStatus.REJECTED]: types_1.CivicPassMessageAction.TOKEN_REJECTED,\n    [types_1.GatewayStatus.LOCATION_NOT_SUPPORTED]: types_1.CivicPassMessageAction.FAILED_IP_CHECK,\n    [types_1.GatewayStatus.VPN_NOT_SUPPORTED]: types_1.CivicPassMessageAction.FAILED_VPN_CHECK,\n    [types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED]: types_1.CivicPassMessageAction.REFRESH,\n    [types_1.GatewayStatus.CHECKING]: types_1.CivicPassMessageAction.STATUS,\n    [types_1.GatewayStatus.NOT_REQUESTED]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.GatewayStatus.COLLECTING_USER_INFORMATION]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.GatewayStatus.VALIDATING_USER_INFORMATION]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.GatewayStatus.USER_INFORMATION_VALIDATED]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.GatewayStatus.USER_INFORMATION_REJECTED]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION]: types_1.CivicPassMessageAction.AWAITING_TRANSACTION_CONFIRMATION,\n    [types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR]: types_1.CivicPassMessageAction.CHAIN_ERROR,\n};\nconst validationProcessToGatewayStatus = {\n    [types_1.ValidationStatus.COLLECTING]: types_1.GatewayStatus.COLLECTING_USER_INFORMATION,\n    [types_1.ValidationStatus.PROCESSING]: types_1.GatewayStatus.VALIDATING_USER_INFORMATION,\n    [types_1.ValidationStatus.IN_REVIEW]: types_1.GatewayStatus.VALIDATING_USER_INFORMATION,\n    [types_1.ValidationStatus.FAILED]: types_1.GatewayStatus.USER_INFORMATION_REJECTED,\n    [types_1.ValidationStatus.NOT_FOUND]: types_1.GatewayStatus.NOT_REQUESTED,\n    [types_1.ValidationStatus.COMPLETED]: types_1.GatewayStatus.USER_INFORMATION_VALIDATED,\n};\nconst logDebug = (message, obj = null) => logger_1.default.debug(`[useCivicPass] ${message}`, obj);\nconst logError = (message, obj = null) => logger_1.default.error(`[useCivicPass] ${message}`, obj);\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst getCivicPassSrcUrl = (state, status) => {\n    const { redirectUrl, gatekeeperNetworkAddress, stage, walletAddress, civicPass, chainType, ownerSigns } = state;\n    if (!gatekeeperNetworkAddress || !walletAddress) {\n        logError('Required properties not present', { gatekeeperNetworkAddress, walletAddress });\n        throw new Error(`Required properties not present ${{ gatekeeperNetworkAddress, walletAddress }}`);\n    }\n    const civicPassSrcUrl = (0, config_1.getCivicPassEndpoint)(stage);\n    const url = new URL(civicPassSrcUrl);\n    const action = gatewayStatusToCivicPassAction[status];\n    const searchParams = new URLSearchParams(Object.assign(Object.assign({}, civicPass.requestPayload), { redirectUrl, networkAddress: gatekeeperNetworkAddress, action, wallet: walletAddress, chain: chainType, ownerSigns: ownerSigns ? 'true' : 'false' }));\n    logDebug('Civic pass query params', {\n        searchParams: searchParams.toString(),\n        gatewayStatus: (0, status_1.statusDisplayValue)(status),\n    });\n    return `${url.href}?${searchParams.toString()}`;\n};\nconst reducer = (state, action) => {\n    var _a;\n    switch (action.type) {\n        case 'civicPass_check_token_status': {\n            return Object.assign(Object.assign({}, state), { iframeMinimized: !((_a = state.options) === null || _a === void 0 ? void 0 : _a.autoShowModal), renderIframe: true, iframeSrcUrl: state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED\n                    ? state.iframeSrcUrl\n                    : getCivicPassSrcUrl(state, (0, utils_1.statusFromToken)(state, action.token)) });\n        }\n        case 'civicPass_check_status': {\n            return Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: true, gatewayStatus: types_1.GatewayStatus.CHECKING, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.CHECKING) });\n        }\n        case 'civicPass_check_status_complete': {\n            const { payload } = action.payload;\n            const { status } = payload;\n            const gatewayStatus = validationProcessToGatewayStatus[status];\n            return Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: false, gatewayStatus });\n        }\n        case 'userInteraction_check_gatewayToken_status': {\n            return Object.assign(Object.assign({}, state), { iframeMinimized: false, renderIframe: true, iframeSrcUrl: state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED\n                    ? state.iframeSrcUrl\n                    : getCivicPassSrcUrl(state, (0, utils_1.statusFromToken)(state, action.token)) });\n        }\n        case 'civicPass_close': {\n            const { gatewayStatus } = state;\n            const requiresRefresh = gatewayStatus === types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED ||\n                gatewayStatus === types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP;\n            // keep iframe in mounted while civic pass is requested, or if we are showing the awaiting owner tx screen\n            // as the internal iframe state needs to be preserved\n            const renderIframe = state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED ||\n                gatewayStatus === types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION;\n            return Object.assign({}, (renderIframe\n                ? Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe }) : Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe, refreshTokenState: requiresRefresh ? state.refreshTokenState : types_1.RefreshTokenState.COMPLETED })));\n        }\n        case 'civicPass_in_progress': {\n            return Object.assign(Object.assign({}, state), { gatewayStatus: types_1.GatewayStatus.COLLECTING_USER_INFORMATION, renderIframe: true, iframeMinimized: false, civicPass: Object.assign(Object.assign({}, state.civicPass), { status: types_1.CivicPassIssuanceStatus.REQUESTED }) });\n        }\n        case 'civicPass_issuance_success': {\n            const { ownerSigns } = state;\n            const { payload, requiresProofOfWalletOwnership } = action.payload;\n            const shouldRequestPowo = ownerSigns ? false : requiresProofOfWalletOwnership;\n            const gatewayStatus = shouldRequestPowo ? types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP : types_1.GatewayStatus.IN_REVIEW;\n            return Object.assign(Object.assign({}, state), { gatewayStatus, renderIframe: !ownerSigns, iframeMinimized: ownerSigns, powoRequested: 'solana', iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus), civicPass: Object.assign(Object.assign({}, state.civicPass), { status: types_1.CivicPassIssuanceStatus.VERIFIED, responsePayload: {\n                        [types_1.CivicPassMessageAction.ISSUANCE]: {\n                            payload,\n                            requiresProofOfWalletOwnership: shouldRequestPowo,\n                        },\n                    } }) });\n        }\n        case 'civicPass_issuance_failure':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { iframeMinimized: false, renderIframe: true, gatewayStatus: types_1.GatewayStatus.ERROR });\n        case 'civicPass_requested_retries_exhausted':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { refreshTokenState: types_1.RefreshTokenState.NOT_REQUIRED, iframeMinimized: false, renderIframe: true, gatewayStatus: types_1.GatewayStatus.ERROR, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.ERROR) });\n        case 'civicPass_error_user_retry':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { iframeMinimized: false, renderIframe: true, gatewayStatus: types_1.GatewayStatus.NOT_REQUESTED, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.NOT_REQUESTED) });\n        case 'civicPass_issuance_cancelled':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { gatewayStatus: types_1.GatewayStatus.NOT_REQUESTED });\n        case 'civicPass_refresh_success': {\n            const { ownerSigns } = state;\n            const { payload, requiresProofOfWalletOwnership } = action.payload;\n            const shouldRequestPowo = ownerSigns ? false : requiresProofOfWalletOwnership;\n            const gatewayStatus = shouldRequestPowo ? types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP : types_1.GatewayStatus.IN_REVIEW;\n            return Object.assign(Object.assign({}, state), { gatewayStatus, renderIframe: !ownerSigns, iframeMinimized: ownerSigns, iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus), refreshTokenState: types_1.RefreshTokenState.IN_PROGRESS, civicPass: Object.assign(Object.assign({}, state.civicPass), { responsePayload: {\n                        [types_1.CivicPassMessageAction.REFRESH]: {\n                            payload,\n                            requiresProofOfWalletOwnership: shouldRequestPowo,\n                        },\n                    } }) });\n        }\n        case 'civicPass_refresh_cancelled':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { refreshTokenState: types_1.RefreshTokenState.CANCELLED, gatewayStatus: types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED });\n        case 'civicPass_refresh_failure':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { refreshTokenState: types_1.RefreshTokenState.FAILED, gatewayStatus: types_1.GatewayStatus.ERROR, civicPass: Object.assign(Object.assign({}, state.civicPass), { responsePayload: undefined }) });\n        case 'civicPass_location_not_supported':\n            return Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: false, gatewayStatus: state.gatewayStatus, refreshTokenState: state.gatekeeperRecordState === types_1.GatekeeperAPIStatus.ISSUED_LOCATION_NOT_SUPPORTED\n                    ? types_1.RefreshTokenState.REQUIRES_POWO\n                    : state.refreshTokenState });\n        case 'civicPass_vpn_not_supported':\n            return Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: false, gatewayStatus: state.gatewayStatus });\n        case 'civicPass_awaiting_owner_transaction':\n            return Object.assign(Object.assign({}, state), { iframeMinimized: false, renderIframe: true, gatewayStatus: types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION) });\n        case 'civicPass_owner_transaction_timeout':\n            return Object.assign(Object.assign({}, state), { iframeMinimized: false, renderIframe: true, gatewayStatus: types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR) });\n        default:\n            return state;\n    }\n};\nexports.reducer = reducer;\nconst useCivicPass = ({ wallet }, state, dispatch) => {\n    const { gatekeeperRecordState } = state;\n    const getActionForIssuanceResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_issuance_success',\n                payload: response,\n            },\n            [types_1.CivicPassMessageEventResult.FAILURE]: {\n                type: 'civicPass_issuance_failure',\n            },\n            [types_1.CivicPassMessageEventResult.CANCELLED]: {\n                type: 'civicPass_issuance_cancelled',\n            },\n            [types_1.CivicPassMessageEventResult.IN_PROGRESS]: {\n                type: 'civicPass_in_progress',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForRefreshResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_refresh_success',\n                payload: response,\n            },\n            [types_1.CivicPassMessageEventResult.CANCELLED]: {\n                type: 'civicPass_refresh_cancelled',\n            },\n            [types_1.CivicPassMessageEventResult.FAILURE]: {\n                type: 'civicPass_refresh_failure',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForPowoResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'powoComplete',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForLocationNotSupportedResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_location_not_supported',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForVpnNotSupportedResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_vpn_not_supported',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForStaticResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_close',\n            },\n            [types_1.CivicPassMessageEventResult.FAILURE]: {\n                type: 'civicPass_error_user_retry',\n            },\n        };\n        const returnAction = actions[response.event];\n        return returnAction;\n    };\n    const getActionForStatusResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_check_status_complete',\n                payload: response,\n            },\n        };\n        return actions[response.event];\n    };\n    const dispatchComplianceEventResult = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageAction.ISSUANCE]: getActionForIssuanceResponse(response),\n            [types_1.CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP]: getActionForPowoResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_IN_REVIEW]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_ACTIVE]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_FROZEN]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_REJECTED]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_REVOKED]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.FAILED_IP_CHECK]: getActionForLocationNotSupportedResponse(response),\n            [types_1.CivicPassMessageAction.FAILED_VPN_CHECK]: getActionForVpnNotSupportedResponse(response),\n            [types_1.CivicPassMessageAction.REFRESH]: getActionForRefreshResponse(response),\n            [types_1.CivicPassMessageAction.STATUS]: getActionForStatusResponse(response),\n            [types_1.CivicPassMessageAction.ERROR]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.CHAIN_ERROR]: getActionForStaticResponse(response),\n        };\n        const action = actions[response.action];\n        if (action) {\n            logDebug('Successfully processed compliance event with action', action);\n            dispatch(action);\n        }\n    };\n    /**\n     * Listen for post messages from the compliance iframe and dispatch events\n     * based on the event type\n     */\n    (0, react_1.useEffect)(() => {\n        if (wallet && wallet.publicKey) {\n            logDebug('Current state', state);\n            const handler = async (response) => {\n                dispatchComplianceEventResult(response.data);\n            };\n            window.addEventListener('message', handler);\n            return () => {\n                logDebug('Removing event listener for compliance');\n                return window.removeEventListener('message', handler);\n            };\n        }\n        return () => { };\n    }, []);\n    /**\n     * We do not have a token and user is connecting from an unsupported country,\n     * so we show the country not supported screen\n     */\n    (0, react_1.useEffect)(() => {\n        if (gatekeeperRecordState === types_1.GatekeeperAPIStatus.LOCATION_NOT_SUPPORTED ||\n            gatekeeperRecordState === types_1.GatekeeperAPIStatus.VPN_NOT_SUPPORTED) {\n            dispatch({ type: 'civicPass_check_token_status' });\n        }\n    }, [gatekeeperRecordState]);\n    /**\n     * Check for the ongoing KYC status\n     */\n    (0, react_1.useEffect)(() => {\n        if (gatekeeperRecordState === types_1.GatekeeperAPIStatus.NOT_REQUESTED) {\n            dispatch({ type: 'civicPass_check_status' });\n        }\n    }, [gatekeeperRecordState]);\n    return { dispatchComplianceEventResult };\n};\nexports.default = useCivicPass;\n"]},"metadata":{},"sourceType":"script"}