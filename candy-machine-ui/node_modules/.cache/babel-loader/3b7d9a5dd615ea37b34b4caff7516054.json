{"ast":null,"code":"import nacl from '@toruslabs/tweetnacl-js';\nconst l = nacl.lowlevel;\n\nfunction getED25519Key(privateKey) {\n  let privKey;\n\n  if (typeof privateKey === \"string\") {\n    privKey = Buffer.from(privateKey, \"hex\");\n  } else {\n    privKey = privateKey;\n  } // Implementation copied from tweetnacl\n\n\n  const d = new Uint8Array(64);\n  const p = [l.gf(), l.gf(), l.gf(), l.gf()];\n  const sk = new Uint8Array([...new Uint8Array(privKey), ...new Uint8Array(32)]);\n  const pk = new Uint8Array(32);\n  l.crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n  l.scalarbase(p, d);\n  l.pack(pk, p);\n\n  for (let i = 0; i < 32; i += 1) sk[i + 32] = pk[i];\n\n  return {\n    sk: Buffer.from(sk),\n    pk: Buffer.from(pk)\n  };\n}\n\nexport { getED25519Key };","map":{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":";AAQA,MAAM,CAAC,GAAI,IAAY,CAAC,QAAxB;;SAEgB,a,CAAc,U,EAA2B;AAIvD,MAAI,OAAJ;;AACA,MAAI,OAAO,UAAP,KAAsB,QAA1B,EAAoC;AAClC,IAAA,OAAO,GAAG,MAAM,CAAC,IAAP,CAAY,UAAZ,EAAwB,KAAxB,CAAV;AACD,GAFD,MAEO;AACL,IAAA,OAAO,GAAG,UAAV;AACD,GATsD,C;;;AAYvD,QAAM,CAAC,GAAG,IAAI,UAAJ,CAAe,EAAf,CAAV;AACA,QAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAF,EAAD,EAAS,CAAC,CAAC,EAAF,EAAT,EAAiB,CAAC,CAAC,EAAF,EAAjB,EAAyB,CAAC,CAAC,EAAF,EAAzB,CAAV;AACA,QAAM,EAAE,GAAG,IAAI,UAAJ,CAAe,CAAC,GAAG,IAAI,UAAJ,CAAe,OAAf,CAAJ,EAA6B,GAAG,IAAI,UAAJ,CAAe,EAAf,CAAhC,CAAf,CAAX;AACA,QAAM,EAAE,GAAG,IAAI,UAAJ,CAAe,EAAf,CAAX;AACA,EAAA,CAAC,CAAC,WAAF,CAAc,CAAd,EAAiB,EAAjB,EAAqB,EAArB;AAEA,EAAA,CAAC,CAAC,CAAD,CAAD,IAAQ,GAAR;AAEA,EAAA,CAAC,CAAC,EAAD,CAAD,IAAS,GAAT;AAEA,EAAA,CAAC,CAAC,EAAD,CAAD,IAAS,EAAT;AACA,EAAA,CAAC,CAAC,UAAF,CAAa,CAAb,EAAgB,CAAhB;AACA,EAAA,CAAC,CAAC,IAAF,CAAO,EAAP,EAAW,CAAX;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,IAAI,CAA7B,EAAgC,EAAE,CAAC,CAAC,GAAG,EAAL,CAAF,GAAa,EAAE,CAAC,CAAD,CAAf;;AAEhC,SAAO;AAAE,IAAA,EAAE,EAAE,MAAM,CAAC,IAAP,CAAY,EAAZ,CAAN;AAAuB,IAAA,EAAE,EAAE,MAAM,CAAC,IAAP,CAAY,EAAZ;AAA3B,GAAP;AACF","sourcesContent":["import nacl from '@toruslabs/tweetnacl-js';\n\nconst l = nacl.lowlevel;\nfunction getED25519Key(privateKey) {\n    let privKey;\n    if (typeof privateKey === \"string\") {\n        privKey = Buffer.from(privateKey, \"hex\");\n    }\n    else {\n        privKey = privateKey;\n    }\n    // Implementation copied from tweetnacl\n    const d = new Uint8Array(64);\n    const p = [l.gf(), l.gf(), l.gf(), l.gf()];\n    const sk = new Uint8Array([...new Uint8Array(privKey), ...new Uint8Array(32)]);\n    const pk = new Uint8Array(32);\n    l.crypto_hash(d, sk, 32);\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n    l.scalarbase(p, d);\n    l.pack(pk, p);\n    for (let i = 0; i < 32; i += 1)\n        sk[i + 32] = pk[i];\n    return { sk: Buffer.from(sk), pk: Buffer.from(pk) };\n}\n\nexport { getED25519Key };\n//# sourceMappingURL=openloginEd25519.esm.js.map\n"]},"metadata":{},"sourceType":"module"}