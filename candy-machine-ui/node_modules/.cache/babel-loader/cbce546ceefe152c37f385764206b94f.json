{"ast":null,"code":"import _regeneratorRuntime from \"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { StatusCodes, TransportStatusError } from '@ledgerhq/hw-transport';\nimport { PublicKey } from '@solana/web3.js';\nexport function getDerivationPath(account, change) {\n  var length = account !== undefined ? change === undefined ? 3 : 4 : 2;\n  var derivationPath = Buffer.alloc(1 + length * 4);\n  var offset = derivationPath.writeUInt8(length, 0);\n  offset = derivationPath.writeUInt32BE(harden(44), offset); // Using BIP44\n\n  offset = derivationPath.writeUInt32BE(harden(501), offset); // Solana's BIP44 path\n\n  if (account !== undefined) {\n    offset = derivationPath.writeUInt32BE(harden(account), offset);\n\n    if (change !== undefined) {\n      derivationPath.writeUInt32BE(harden(change), offset);\n    }\n  }\n\n  return derivationPath;\n}\nvar BIP32_HARDENED_BIT = 1 << 31 >>> 0;\n\nfunction harden(n) {\n  return (n | BIP32_HARDENED_BIT) >>> 0;\n}\n\nvar INS_GET_PUBKEY = 0x05;\nvar INS_SIGN_MESSAGE = 0x06;\nvar P1_NON_CONFIRM = 0x00;\nvar P1_CONFIRM = 0x01;\nvar P2_EXTEND = 0x01;\nvar P2_MORE = 0x02;\nvar MAX_PAYLOAD = 255;\nvar LEDGER_CLA = 0xe0;\nexport function getPublicKey(transport, derivationPath) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var bytes;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return send(transport, INS_GET_PUBKEY, P1_NON_CONFIRM, derivationPath);\n\n          case 2:\n            bytes = _context.sent;\n            return _context.abrupt(\"return\", new PublicKey(bytes));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexport function signTransaction(transport, transaction, derivationPath) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var paths, message, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            paths = Buffer.alloc(1);\n            paths.writeUInt8(1, 0);\n            message = transaction.serializeMessage();\n            data = Buffer.concat([paths, derivationPath, message]);\n            _context2.next = 6;\n            return send(transport, INS_SIGN_MESSAGE, P1_CONFIRM, data);\n\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nfunction send(transport, instruction, p1, data) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var p2, offset, _buffer, _response, buffer, response;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            p2 = 0;\n            offset = 0;\n\n            if (!(data.length > MAX_PAYLOAD)) {\n              _context3.next = 14;\n              break;\n            }\n\n          case 3:\n            if (!(data.length - offset > MAX_PAYLOAD)) {\n              _context3.next = 14;\n              break;\n            }\n\n            _buffer = data.slice(offset, offset + MAX_PAYLOAD);\n            _context3.next = 7;\n            return transport.send(LEDGER_CLA, instruction, p1, p2 | P2_MORE, _buffer);\n\n          case 7:\n            _response = _context3.sent;\n\n            if (!(_response.length !== 2)) {\n              _context3.next = 10;\n              break;\n            }\n\n            throw new TransportStatusError(StatusCodes.INCORRECT_DATA);\n\n          case 10:\n            p2 |= P2_EXTEND;\n            offset += MAX_PAYLOAD;\n            _context3.next = 3;\n            break;\n\n          case 14:\n            buffer = data.slice(offset);\n            _context3.next = 17;\n            return transport.send(LEDGER_CLA, instruction, p1, p2, buffer);\n\n          case 17:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", response.slice(0, response.length - 2));\n\n          case 19:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}","map":{"version":3,"sources":["../src/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { StatusCodes, TransportStatusError } from '@ledgerhq/hw-transport';\nimport { PublicKey } from '@solana/web3.js';\nexport function getDerivationPath(account, change) {\n    const length = account !== undefined ? (change === undefined ? 3 : 4) : 2;\n    const derivationPath = Buffer.alloc(1 + length * 4);\n    let offset = derivationPath.writeUInt8(length, 0);\n    offset = derivationPath.writeUInt32BE(harden(44), offset); // Using BIP44\n    offset = derivationPath.writeUInt32BE(harden(501), offset); // Solana's BIP44 path\n    if (account !== undefined) {\n        offset = derivationPath.writeUInt32BE(harden(account), offset);\n        if (change !== undefined) {\n            derivationPath.writeUInt32BE(harden(change), offset);\n        }\n    }\n    return derivationPath;\n}\nconst BIP32_HARDENED_BIT = (1 << 31) >>> 0;\nfunction harden(n) {\n    return (n | BIP32_HARDENED_BIT) >>> 0;\n}\nconst INS_GET_PUBKEY = 0x05;\nconst INS_SIGN_MESSAGE = 0x06;\nconst P1_NON_CONFIRM = 0x00;\nconst P1_CONFIRM = 0x01;\nconst P2_EXTEND = 0x01;\nconst P2_MORE = 0x02;\nconst MAX_PAYLOAD = 255;\nconst LEDGER_CLA = 0xe0;\nexport function getPublicKey(transport, derivationPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const bytes = yield send(transport, INS_GET_PUBKEY, P1_NON_CONFIRM, derivationPath);\n        return new PublicKey(bytes);\n    });\n}\nexport function signTransaction(transport, transaction, derivationPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const paths = Buffer.alloc(1);\n        paths.writeUInt8(1, 0);\n        const message = transaction.serializeMessage();\n        const data = Buffer.concat([paths, derivationPath, message]);\n        return yield send(transport, INS_SIGN_MESSAGE, P1_CONFIRM, data);\n    });\n}\nfunction send(transport, instruction, p1, data) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let p2 = 0;\n        let offset = 0;\n        if (data.length > MAX_PAYLOAD) {\n            while (data.length - offset > MAX_PAYLOAD) {\n                const buffer = data.slice(offset, offset + MAX_PAYLOAD);\n                const response = yield transport.send(LEDGER_CLA, instruction, p1, p2 | P2_MORE, buffer);\n                // @ts-ignore\n                if (response.length !== 2)\n                    throw new TransportStatusError(StatusCodes.INCORRECT_DATA);\n                p2 |= P2_EXTEND;\n                offset += MAX_PAYLOAD;\n            }\n        }\n        const buffer = data.slice(offset);\n        const response = yield transport.send(LEDGER_CLA, instruction, p1, p2, buffer);\n        return response.slice(0, response.length - 2);\n    });\n}\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}