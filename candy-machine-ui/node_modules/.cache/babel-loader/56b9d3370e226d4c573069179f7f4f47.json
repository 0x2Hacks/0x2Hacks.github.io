{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GatewayToken = exports.State = void 0;\n\nvar GatewayTokenData_1 = require(\"../lib/GatewayTokenData\");\n\nvar util_1 = require(\"../lib/util\");\n\nvar State;\n\n(function (State) {\n  State[\"ACTIVE\"] = \"ACTIVE\";\n  State[\"REVOKED\"] = \"REVOKED\";\n  State[\"FROZEN\"] = \"FROZEN\";\n})(State = exports.State || (exports.State = {}));\n\nvar GatewayToken = /*#__PURE__*/function () {\n  function GatewayToken( //  the key used to reference the issuing gatekeeper\n  issuingGatekeeper, gatekeeperNetwork, owner, state, publicKey, programId, expiryTime) {\n    _classCallCheck(this, GatewayToken);\n\n    this.issuingGatekeeper = issuingGatekeeper;\n    this.gatekeeperNetwork = gatekeeperNetwork;\n    this.owner = owner;\n    this.state = state;\n    this.publicKey = publicKey;\n    this.programId = programId;\n    this.expiryTime = expiryTime;\n  }\n\n  _createClass(GatewayToken, [{\n    key: \"isValid\",\n    value: function isValid() {\n      return this.state === State.ACTIVE && !this.hasExpired();\n    }\n  }, {\n    key: \"hasExpired\",\n    value: function hasExpired() {\n      var now = Math.floor(Date.now() / 1000);\n      return !!this.expiryTime && now > this.expiryTime;\n    }\n  }, {\n    key: \"update\",\n    value: function update(_ref) {\n      var state = _ref.state,\n          expiryTime = _ref.expiryTime;\n      return new GatewayToken(this.issuingGatekeeper, this.gatekeeperNetwork, this.owner, state, this.publicKey, this.programId, expiryTime || this.expiryTime);\n    }\n  }], [{\n    key: \"fromAccount\",\n    value: function fromAccount(accountInfo, key) {\n      var parsedData = GatewayTokenData_1.GatewayTokenData.fromAccount(accountInfo.data);\n      return (0, util_1.dataToGatewayToken)(parsedData, key);\n    }\n  }]);\n\n  return GatewayToken;\n}();\n\nexports.GatewayToken = GatewayToken;","map":{"version":3,"sources":["../../src/types/index.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,IAAA,kBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAMA,IAAY,KAAZ;;AAAA,CAAA,UAAY,KAAZ,EAAiB;AACf,EAAA,KAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACA,EAAA,KAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,KAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACD,CAJD,EAAY,KAAK,GAAL,OAAA,CAAA,KAAA,KAAA,OAAA,CAAA,KAAA,GAAK,EAAL,CAAZ;;IAKa,Y;AACX,yBACE;AACS,EAAA,iBAFX,EAGW,iBAHX,EAIW,KAJX,EAKW,KALX,EAMW,SANX,EAOW,SAPX,EAQW,UARX,EAQ8B;AAAA;;AANnB,SAAA,iBAAA,GAAA,iBAAA;AACA,SAAA,iBAAA,GAAA,iBAAA;AACA,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,UAAA,GAAA,UAAA;AACP;;;;WAEJ,mBAAO;AACL,aAAO,KAAK,KAAL,KAAe,KAAK,CAAC,MAArB,IAA+B,CAAC,KAAK,UAAL,EAAvC;AACD;;;WAEO,sBAAU;AAChB,UAAM,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,GAAL,KAAa,IAAxB,CAAZ;AACA,aAAO,CAAC,CAAC,KAAK,UAAP,IAAqB,GAAG,GAAG,KAAK,UAAvC;AACD;;;WAUM,sBAMN;AAAA,UALC,KAKD,QALC,KAKD;AAAA,UAJC,UAID,QAJC,UAID;AACC,aAAO,IAAI,YAAJ,CACL,KAAK,iBADA,EAEL,KAAK,iBAFA,EAGL,KAAK,KAHA,EAIL,KAJK,EAKL,KAAK,SALA,EAML,KAAK,SANA,EAOL,UAAU,IAAI,KAAK,UAPd,CAAP;AASD;;;WAxBD,qBACE,WADF,EAEE,GAFF,EAEgB;AAEd,UAAM,UAAU,GAAG,kBAAA,CAAA,gBAAA,CAAiB,WAAjB,CAA6B,WAAW,CAAC,IAAzC,CAAnB;AACA,aAAO,CAAA,GAAA,MAAA,CAAA,kBAAA,EAAmB,UAAnB,EAA+B,GAA/B,CAAP;AACD;;;;;;AA3BH,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GatewayToken = exports.State = void 0;\nconst GatewayTokenData_1 = require(\"../lib/GatewayTokenData\");\nconst util_1 = require(\"../lib/util\");\nvar State;\n(function (State) {\n    State[\"ACTIVE\"] = \"ACTIVE\";\n    State[\"REVOKED\"] = \"REVOKED\";\n    State[\"FROZEN\"] = \"FROZEN\";\n})(State = exports.State || (exports.State = {}));\nclass GatewayToken {\n    constructor(\n    //  the key used to reference the issuing gatekeeper\n    issuingGatekeeper, gatekeeperNetwork, owner, state, publicKey, programId, expiryTime) {\n        this.issuingGatekeeper = issuingGatekeeper;\n        this.gatekeeperNetwork = gatekeeperNetwork;\n        this.owner = owner;\n        this.state = state;\n        this.publicKey = publicKey;\n        this.programId = programId;\n        this.expiryTime = expiryTime;\n    }\n    isValid() {\n        return this.state === State.ACTIVE && !this.hasExpired();\n    }\n    hasExpired() {\n        const now = Math.floor(Date.now() / 1000);\n        return !!this.expiryTime && now > this.expiryTime;\n    }\n    static fromAccount(accountInfo, key) {\n        const parsedData = GatewayTokenData_1.GatewayTokenData.fromAccount(accountInfo.data);\n        return (0, util_1.dataToGatewayToken)(parsedData, key);\n    }\n    update({ state, expiryTime, }) {\n        return new GatewayToken(this.issuingGatekeeper, this.gatekeeperNetwork, this.owner, state, this.publicKey, this.programId, expiryTime || this.expiryTime);\n    }\n}\nexports.GatewayToken = GatewayToken;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}