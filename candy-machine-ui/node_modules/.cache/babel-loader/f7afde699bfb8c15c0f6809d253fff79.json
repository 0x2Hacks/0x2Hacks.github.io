{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _asyncToGenerator = require(\"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = require(\"react\");\n\nvar logger_1 = __importDefault(require(\"../logger\"));\n\nvar useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\n\nvar useGatekeeper = function useGatekeeper(_ref, state, dispatch) {\n  var wallet = _ref.wallet,\n      stage = _ref.stage,\n      gatekeeperClient = _ref.gatekeeperClient;\n\n  var _ref2 = (0, useWalletHooks_1.default)(wallet, state, dispatch),\n      expectWalletConnected = _ref2.expectWalletConnected;\n\n  var gatekeeperNetworkAddress = state.gatekeeperNetworkAddress,\n      ownerSigns = state.ownerSigns;\n  /**\n   * if a request is not already in progress, initiate a request to the gatekeeper for a new token\n   * and dispatch an event so we know it's in progress\n   */\n\n  var waitForGatekeeperIssuanceRequest = (0, react_1.useCallback)(\n  /*#__PURE__*/\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref3) {\n      var payload, proof, connectedWallet, requestGatewayTokenFromGatekeeperResult, transaction;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              payload = _ref3.payload, proof = _ref3.proof;\n              connectedWallet = expectWalletConnected();\n              logger_1.default.debug('waitForGatekeeperIssuanceRequest ready to call requestGatewayTokenFromGatekeeper', {\n                payload: payload\n              });\n              dispatch({\n                type: 'requestGatekeeperIssuance'\n              });\n              _context.next = 6;\n              return gatekeeperClient().requestGatewayTokenFromGatekeeper({\n                wallet: connectedWallet,\n                payload: payload,\n                proof: proof,\n                ownerSigns: ownerSigns !== null && ownerSigns !== void 0 ? ownerSigns : false\n              });\n\n            case 6:\n              requestGatewayTokenFromGatekeeperResult = _context.sent;\n              logger_1.default.debug('requestGatewayTokenFromGatekeeperResult', requestGatewayTokenFromGatekeeperResult);\n\n              if (!(requestGatewayTokenFromGatekeeperResult.status >= 400)) {\n                _context.next = 12;\n                break;\n              }\n\n              logger_1.default.error('Error requesting token from gatekeeper');\n              dispatch({\n                type: 'requestGatekeeperIssuanceFailed'\n              });\n              throw new Error('Error requesting token from gatekeeper');\n\n            case 12:\n              transaction = requestGatewayTokenFromGatekeeperResult.transaction;\n              logger_1.default.debug('Successfully requested gatekeeper token');\n              dispatch({\n                type: 'requestGatekeeperIssuanceComplete',\n                gatewayTokenTransaction: transaction\n              });\n              return _context.abrupt(\"return\", transaction);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), [gatekeeperClient, expectWalletConnected, stage, ownerSigns]);\n  /**\n   * Update the state when the Gatekeeper network changes\n   */\n\n  (0, react_1.useEffect)(function () {\n    if (wallet && wallet.publicKey && gatekeeperNetworkAddress) {\n      dispatch({\n        type: 'gatekeeperNetworkChanged',\n        gatekeeperNetworkAddress: gatekeeperNetworkAddress\n      });\n    }\n  }, [gatekeeperNetworkAddress]);\n  return {\n    waitForGatekeeperIssuanceRequest: waitForGatekeeperIssuanceRequest,\n    gatekeeperClient: gatekeeperClient\n  };\n};\n\nexports.default = useGatekeeper;","map":{"version":3,"sources":["/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@civic/common-gateway-react/dist/esm/useHooks/useGatekeeper.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","react_1","require","logger_1","useWalletHooks_1","useGatekeeper","state","dispatch","wallet","stage","gatekeeperClient","default","expectWalletConnected","gatekeeperNetworkAddress","ownerSigns","waitForGatekeeperIssuanceRequest","useCallback","payload","proof","connectedWallet","debug","type","requestGatewayTokenFromGatekeeper","requestGatewayTokenFromGatekeeperResult","status","error","Error","transaction","gatewayTokenTransaction","useEffect","publicKey"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = require(\"react\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\nconst useGatekeeper = ({ wallet, stage, gatekeeperClient, }, state, dispatch) => {\n    const { expectWalletConnected } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n    const { gatekeeperNetworkAddress, ownerSigns } = state;\n    /**\n     * if a request is not already in progress, initiate a request to the gatekeeper for a new token\n     * and dispatch an event so we know it's in progress\n     */\n    const waitForGatekeeperIssuanceRequest = (0, react_1.useCallback)(\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    async ({ payload, proof }) => {\n        const connectedWallet = expectWalletConnected();\n        logger_1.default.debug('waitForGatekeeperIssuanceRequest ready to call requestGatewayTokenFromGatekeeper', {\n            payload,\n        });\n        dispatch({ type: 'requestGatekeeperIssuance' });\n        const requestGatewayTokenFromGatekeeperResult = await gatekeeperClient().requestGatewayTokenFromGatekeeper({\n            wallet: connectedWallet,\n            payload,\n            proof,\n            ownerSigns: ownerSigns !== null && ownerSigns !== void 0 ? ownerSigns : false,\n        });\n        logger_1.default.debug('requestGatewayTokenFromGatekeeperResult', requestGatewayTokenFromGatekeeperResult);\n        if (requestGatewayTokenFromGatekeeperResult.status >= 400) {\n            logger_1.default.error('Error requesting token from gatekeeper');\n            dispatch({ type: 'requestGatekeeperIssuanceFailed' });\n            throw new Error('Error requesting token from gatekeeper');\n        }\n        const { transaction } = requestGatewayTokenFromGatekeeperResult;\n        logger_1.default.debug('Successfully requested gatekeeper token');\n        dispatch({ type: 'requestGatekeeperIssuanceComplete', gatewayTokenTransaction: transaction });\n        return transaction;\n    }, [gatekeeperClient, expectWalletConnected, stage, ownerSigns]);\n    /**\n     * Update the state when the Gatekeeper network changes\n     */\n    (0, react_1.useEffect)(() => {\n        if (wallet && wallet.publicKey && gatekeeperNetworkAddress) {\n            dispatch({ type: 'gatekeeperNetworkChanged', gatekeeperNetworkAddress });\n        }\n    }, [gatekeeperNetworkAddress]);\n    return {\n        waitForGatekeeperIssuanceRequest,\n        gatekeeperClient,\n    };\n};\nexports.default = useGatekeeper;\n"]},"metadata":{},"sourceType":"script"}