{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.statusDisplayValue = exports.mapStatus = void 0;\n\nvar types_1 = require(\"../types\");\n/** Map InternalGatewayStatuses that also contain non public API ExtendedGatewayStatuses to GatewayStatuses */\n\n\nvar mapStatus = function mapStatus(internalStatus) {\n  switch (internalStatus) {\n    // Map extended statuses to GatewayStatus\n    case types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION:\n      return types_1.GatewayStatus.IN_REVIEW;\n\n    case types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR:\n      return types_1.GatewayStatus.ERROR;\n\n    default:\n      // otherwise return GatewayStatus\n      return internalStatus;\n  }\n};\n\nexports.mapStatus = mapStatus;\n/** Return a display value for the given InternalGatewayStatus which includes both ExtendedGatewayStatuses and GatewayStatuses */\n\nvar statusDisplayValue = function statusDisplayValue(internalStatus) {\n  return types_1.ExtendedGatewayStatus[internalStatus] || types_1.GatewayStatus[internalStatus];\n};\n\nexports.statusDisplayValue = statusDisplayValue;","map":{"version":3,"sources":["/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@civic/common-gateway-react/dist/esm/utils/status.js"],"names":["Object","defineProperty","exports","value","statusDisplayValue","mapStatus","types_1","require","internalStatus","ExtendedGatewayStatus","AWAITING_OWNER_TRANSACTION","GatewayStatus","IN_REVIEW","CHAIN_TIMEOUT_ERROR","ERROR"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6BF,OAAO,CAACG,SAAR,GAAoB,KAAK,CAAtD;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;AACA;;;AACA,IAAMF,SAAS,GAAG,SAAZA,SAAY,CAACG,cAAD,EAAoB;AAClC,UAAQA,cAAR;AACI;AACA,SAAKF,OAAO,CAACG,qBAAR,CAA8BC,0BAAnC;AACI,aAAOJ,OAAO,CAACK,aAAR,CAAsBC,SAA7B;;AACJ,SAAKN,OAAO,CAACG,qBAAR,CAA8BI,mBAAnC;AACI,aAAOP,OAAO,CAACK,aAAR,CAAsBG,KAA7B;;AACJ;AACI;AACA,aAAON,cAAP;AARR;AAUH,CAXD;;AAYAN,OAAO,CAACG,SAAR,GAAoBA,SAApB;AACA;;AACA,IAAMD,kBAAkB,GAAG,SAArBA,kBAAqB,CAACI,cAAD,EAAoB;AAC3C,SAAOF,OAAO,CAACG,qBAAR,CAA8BD,cAA9B,KAAiDF,OAAO,CAACK,aAAR,CAAsBH,cAAtB,CAAxD;AACH,CAFD;;AAGAN,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.statusDisplayValue = exports.mapStatus = void 0;\nconst types_1 = require(\"../types\");\n/** Map InternalGatewayStatuses that also contain non public API ExtendedGatewayStatuses to GatewayStatuses */\nconst mapStatus = (internalStatus) => {\n    switch (internalStatus) {\n        // Map extended statuses to GatewayStatus\n        case types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION:\n            return types_1.GatewayStatus.IN_REVIEW;\n        case types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR:\n            return types_1.GatewayStatus.ERROR;\n        default:\n            // otherwise return GatewayStatus\n            return internalStatus;\n    }\n};\nexports.mapStatus = mapStatus;\n/** Return a display value for the given InternalGatewayStatus which includes both ExtendedGatewayStatuses and GatewayStatuses */\nconst statusDisplayValue = (internalStatus) => {\n    return types_1.ExtendedGatewayStatus[internalStatus] || types_1.GatewayStatus[internalStatus];\n};\nexports.statusDisplayValue = statusDisplayValue;\n"]},"metadata":{},"sourceType":"script"}