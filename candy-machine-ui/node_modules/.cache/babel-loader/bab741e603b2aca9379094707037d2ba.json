{"ast":null,"code":"var _require = require('./constants'),\n    MAX_SAFE_COMPONENT_LENGTH = _require.MAX_SAFE_COMPONENT_LENGTH;\n\nvar debug = require('./debug');\n\nexports = module.exports = {}; // The actual regexps go on exports.re\n\nvar re = exports.re = [];\nvar src = exports.src = [];\nvar t = exports.t = {};\nvar R = 0;\n\nvar createToken = function createToken(name, value, isGlobal) {\n  var index = R++;\n  debug(index, value);\n  t[name] = index;\n  src[index] = value;\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined);\n}; // The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*');\ncreateToken('NUMERICIDENTIFIERLOOSE', '[0-9]+'); // ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*'); // ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', \"(\".concat(src[t.NUMERICIDENTIFIER], \")\\\\.\") + \"(\".concat(src[t.NUMERICIDENTIFIER], \")\\\\.\") + \"(\".concat(src[t.NUMERICIDENTIFIER], \")\"));\ncreateToken('MAINVERSIONLOOSE', \"(\".concat(src[t.NUMERICIDENTIFIERLOOSE], \")\\\\.\") + \"(\".concat(src[t.NUMERICIDENTIFIERLOOSE], \")\\\\.\") + \"(\".concat(src[t.NUMERICIDENTIFIERLOOSE], \")\")); // ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', \"(?:\".concat(src[t.NUMERICIDENTIFIER], \"|\").concat(src[t.NONNUMERICIDENTIFIER], \")\"));\ncreateToken('PRERELEASEIDENTIFIERLOOSE', \"(?:\".concat(src[t.NUMERICIDENTIFIERLOOSE], \"|\").concat(src[t.NONNUMERICIDENTIFIER], \")\")); // ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', \"(?:-(\".concat(src[t.PRERELEASEIDENTIFIER], \"(?:\\\\.\").concat(src[t.PRERELEASEIDENTIFIER], \")*))\"));\ncreateToken('PRERELEASELOOSE', \"(?:-?(\".concat(src[t.PRERELEASEIDENTIFIERLOOSE], \"(?:\\\\.\").concat(src[t.PRERELEASEIDENTIFIERLOOSE], \")*))\")); // ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+'); // ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', \"(?:\\\\+(\".concat(src[t.BUILDIDENTIFIER], \"(?:\\\\.\").concat(src[t.BUILDIDENTIFIER], \")*))\")); // ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', \"v?\".concat(src[t.MAINVERSION]).concat(src[t.PRERELEASE], \"?\").concat(src[t.BUILD], \"?\"));\ncreateToken('FULL', \"^\".concat(src[t.FULLPLAIN], \"$\")); // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\n\ncreateToken('LOOSEPLAIN', \"[v=\\\\s]*\".concat(src[t.MAINVERSIONLOOSE]).concat(src[t.PRERELEASELOOSE], \"?\").concat(src[t.BUILD], \"?\"));\ncreateToken('LOOSE', \"^\".concat(src[t.LOOSEPLAIN], \"$\"));\ncreateToken('GTLT', '((?:<|>)?=?)'); // Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\n\ncreateToken('XRANGEIDENTIFIERLOOSE', \"\".concat(src[t.NUMERICIDENTIFIERLOOSE], \"|x|X|\\\\*\"));\ncreateToken('XRANGEIDENTIFIER', \"\".concat(src[t.NUMERICIDENTIFIER], \"|x|X|\\\\*\"));\ncreateToken('XRANGEPLAIN', \"[v=\\\\s]*(\".concat(src[t.XRANGEIDENTIFIER], \")\") + \"(?:\\\\.(\".concat(src[t.XRANGEIDENTIFIER], \")\") + \"(?:\\\\.(\".concat(src[t.XRANGEIDENTIFIER], \")\") + \"(?:\".concat(src[t.PRERELEASE], \")?\").concat(src[t.BUILD], \"?\") + \")?)?\");\ncreateToken('XRANGEPLAINLOOSE', \"[v=\\\\s]*(\".concat(src[t.XRANGEIDENTIFIERLOOSE], \")\") + \"(?:\\\\.(\".concat(src[t.XRANGEIDENTIFIERLOOSE], \")\") + \"(?:\\\\.(\".concat(src[t.XRANGEIDENTIFIERLOOSE], \")\") + \"(?:\".concat(src[t.PRERELEASELOOSE], \")?\").concat(src[t.BUILD], \"?\") + \")?)?\");\ncreateToken('XRANGE', \"^\".concat(src[t.GTLT], \"\\\\s*\").concat(src[t.XRANGEPLAIN], \"$\"));\ncreateToken('XRANGELOOSE', \"^\".concat(src[t.GTLT], \"\\\\s*\").concat(src[t.XRANGEPLAINLOOSE], \"$\")); // Coercion.\n// Extract anything that could conceivably be a part of a valid semver\n\ncreateToken('COERCE', \"\".concat('(^|[^\\\\d])' + '(\\\\d{1,').concat(MAX_SAFE_COMPONENT_LENGTH, \"})\") + \"(?:\\\\.(\\\\d{1,\".concat(MAX_SAFE_COMPONENT_LENGTH, \"}))?\") + \"(?:\\\\.(\\\\d{1,\".concat(MAX_SAFE_COMPONENT_LENGTH, \"}))?\") + \"(?:$|[^\\\\d])\");\ncreateToken('COERCERTL', src[t.COERCE], true); // Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\n\ncreateToken('LONETILDE', '(?:~>?)');\ncreateToken('TILDETRIM', \"(\\\\s*)\".concat(src[t.LONETILDE], \"\\\\s+\"), true);\nexports.tildeTrimReplace = '$1~';\ncreateToken('TILDE', \"^\".concat(src[t.LONETILDE]).concat(src[t.XRANGEPLAIN], \"$\"));\ncreateToken('TILDELOOSE', \"^\".concat(src[t.LONETILDE]).concat(src[t.XRANGEPLAINLOOSE], \"$\")); // Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\n\ncreateToken('LONECARET', '(?:\\\\^)');\ncreateToken('CARETTRIM', \"(\\\\s*)\".concat(src[t.LONECARET], \"\\\\s+\"), true);\nexports.caretTrimReplace = '$1^';\ncreateToken('CARET', \"^\".concat(src[t.LONECARET]).concat(src[t.XRANGEPLAIN], \"$\"));\ncreateToken('CARETLOOSE', \"^\".concat(src[t.LONECARET]).concat(src[t.XRANGEPLAINLOOSE], \"$\")); // A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\n\ncreateToken('COMPARATORLOOSE', \"^\".concat(src[t.GTLT], \"\\\\s*(\").concat(src[t.LOOSEPLAIN], \")$|^$\"));\ncreateToken('COMPARATOR', \"^\".concat(src[t.GTLT], \"\\\\s*(\").concat(src[t.FULLPLAIN], \")$|^$\")); // An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\n\ncreateToken('COMPARATORTRIM', \"(\\\\s*)\".concat(src[t.GTLT], \"\\\\s*(\").concat(src[t.LOOSEPLAIN], \"|\").concat(src[t.XRANGEPLAIN], \")\"), true);\nexports.comparatorTrimReplace = '$1$2$3'; // Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\n\ncreateToken('HYPHENRANGE', \"^\\\\s*(\".concat(src[t.XRANGEPLAIN], \")\") + \"\\\\s+-\\\\s+\" + \"(\".concat(src[t.XRANGEPLAIN], \")\") + \"\\\\s*$\");\ncreateToken('HYPHENRANGELOOSE', \"^\\\\s*(\".concat(src[t.XRANGEPLAINLOOSE], \")\") + \"\\\\s+-\\\\s+\" + \"(\".concat(src[t.XRANGEPLAINLOOSE], \")\") + \"\\\\s*$\"); // Star ranges basically just allow anything at all.\n\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*'); // >=0.0.0 is like a star\n\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\.0\\.0\\\\s*$');\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\.0\\.0-0\\\\s*$');","map":{"version":3,"sources":["/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@ledgerhq/devices/node_modules/semver/internal/re.js"],"names":["require","MAX_SAFE_COMPONENT_LENGTH","debug","exports","module","re","src","t","R","createToken","name","value","isGlobal","index","RegExp","undefined","NUMERICIDENTIFIER","NUMERICIDENTIFIERLOOSE","NONNUMERICIDENTIFIER","PRERELEASEIDENTIFIER","PRERELEASEIDENTIFIERLOOSE","BUILDIDENTIFIER","MAINVERSION","PRERELEASE","BUILD","FULLPLAIN","MAINVERSIONLOOSE","PRERELEASELOOSE","LOOSEPLAIN","XRANGEIDENTIFIER","XRANGEIDENTIFIERLOOSE","GTLT","XRANGEPLAIN","XRANGEPLAINLOOSE","COERCE","LONETILDE","tildeTrimReplace","LONECARET","caretTrimReplace","comparatorTrimReplace"],"mappings":"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","sourcesContent":["const { MAX_SAFE_COMPONENT_LENGTH } = require('./constants')\nconst debug = require('./debug')\nexports = module.exports = {}\n\n// The actual regexps go on exports.re\nconst re = exports.re = []\nconst src = exports.src = []\nconst t = exports.t = {}\nlet R = 0\n\nconst createToken = (name, value, isGlobal) => {\n  const index = R++\n  debug(index, value)\n  t[name] = index\n  src[index] = value\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\ncreateToken('NUMERICIDENTIFIERLOOSE', '[0-9]+')\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*')\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})`)\n\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\n\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+')\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\n}${src[t.PRERELEASE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\n}${src[t.PRERELEASELOOSE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\n\ncreateToken('GTLT', '((?:<|>)?=?)')\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\n\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:${src[t.PRERELEASE]})?${\n                     src[t.BUILD]}?` +\n                   `)?)?`)\n\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:${src[t.PRERELEASELOOSE]})?${\n                          src[t.BUILD]}?` +\n                        `)?)?`)\n\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken('COERCE', `${'(^|[^\\\\d])' +\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:$|[^\\\\d])`)\ncreateToken('COERCERTL', src[t.COERCE], true)\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken('LONETILDE', '(?:~>?)')\n\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\nexports.tildeTrimReplace = '$1~'\n\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken('LONECARET', '(?:\\\\^)')\n\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\nexports.caretTrimReplace = '$1^'\n\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\nexports.comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s+-\\\\s+` +\n                   `(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s*$`)\n\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s+-\\\\s+` +\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s*$`)\n\n// Star ranges basically just allow anything at all.\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\n// >=0.0.0 is like a star\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\.0\\.0\\\\s*$')\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\.0\\.0-0\\\\s*$')\n"]},"metadata":{},"sourceType":"script"}