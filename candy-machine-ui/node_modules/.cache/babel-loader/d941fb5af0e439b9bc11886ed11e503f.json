{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateExpiry = exports.unfreeze = exports.freeze = exports.revoke = exports.issueVanilla = exports.revokeGatekeeper = exports.addGatekeeper = exports.GatewayInstruction = void 0;\n\nconst solanaBorsh_1 = require(\"./solanaBorsh\");\n\nconst constants_1 = require(\"./constants\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst GatewayTokenData_1 = require(\"./GatewayTokenData\");\n/**\n * Creates instructions to send to the gateway program.\n *\n * Must match solana/program/src/instruction.rs\n */\n\n\nclass AddGatekeeper extends solanaBorsh_1.Assignable {}\n\nclass IssueVanilla extends solanaBorsh_1.Assignable {}\n\nclass SetState extends solanaBorsh_1.Assignable {}\n\nclass UpdateExpiry extends solanaBorsh_1.Assignable {}\n\nclass RevokeGatekeeper extends solanaBorsh_1.Assignable {}\n\nclass GatewayInstruction extends solanaBorsh_1.Enum {\n  static addGatekeeper() {\n    return new GatewayInstruction({\n      addGatekeeper: new AddGatekeeper({})\n    });\n  }\n\n  static issueVanilla(seed, expireTime) {\n    return new GatewayInstruction({\n      issueVanilla: new IssueVanilla({\n        seed,\n        expireTime\n      })\n    });\n  }\n\n  static revoke() {\n    return new GatewayInstruction({\n      setState: new SetState({\n        state: new GatewayTokenData_1.GatewayTokenState({\n          revoked: new GatewayTokenData_1.Revoked({})\n        })\n      })\n    });\n  }\n\n  static freeze() {\n    return new GatewayInstruction({\n      setState: new SetState({\n        state: new GatewayTokenData_1.GatewayTokenState({\n          frozen: new GatewayTokenData_1.Frozen({})\n        })\n      })\n    });\n  }\n\n  static unfreeze() {\n    return new GatewayInstruction({\n      setState: new SetState({\n        state: new GatewayTokenData_1.GatewayTokenState({\n          active: new GatewayTokenData_1.Active({})\n        })\n      })\n    });\n  }\n\n  static updateExpiry(expireTime) {\n    return new GatewayInstruction({\n      updateExpiry: new UpdateExpiry({\n        expireTime\n      })\n    });\n  }\n\n  static revokeGatekeeper() {\n    return new GatewayInstruction({\n      revokeGatekeeper: new RevokeGatekeeper({})\n    });\n  }\n\n}\n\nexports.GatewayInstruction = GatewayInstruction;\n/**\n * Add a gatekeeper to a gatekeeper network.\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\n *\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\n * @param gatekeeperAccount An uninitialised gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\n * @param gatekeeperAuthority The gatekeeper to add to the network\n * @param network The gatekeeper network that the account is being added to.\n */\n\nfunction addGatekeeper(payer, gatekeeperAccount, gatekeeperAuthority, network) {\n  const keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: network,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = GatewayInstruction.addGatekeeper().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId: constants_1.PROGRAM_ID,\n    data\n  });\n}\n\nexports.addGatekeeper = addGatekeeper;\n/**\n * Removes a gatekeeper from a gatekeeper network.\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\n *\n * @param funds_to The account the gatekeeper account's rent goes to\n * @param gatekeeperAccount The gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\n * @param gatekeeperAuthority The gatekeeper to remove from the network\n * @param network The gatekeeper network that the account is being removed from.\n */\n\nfunction revokeGatekeeper(funds_to, gatekeeperAccount, gatekeeperAuthority, network) {\n  const keys = [{\n    pubkey: funds_to,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: network,\n    isSigner: true,\n    isWritable: false\n  }];\n  const data = GatewayInstruction.revokeGatekeeper().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId: constants_1.PROGRAM_ID,\n    data\n  });\n}\n\nexports.revokeGatekeeper = revokeGatekeeper;\n/**\n * Issue a gateway token to the owner publicKey. This is a 'vanilla' token, in that it does not\n * rely on any other accounts (e.g. identity accounts) to validate.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount An uninitialised gateway token account PDA. The address must be derived via getGatewayTokenAddressForOwnerAndGatekeeperNetwork\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account).\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper issuing the token\n * @param owner The recipient of the token\n * @param gatekeeperAuthority The gatekeeper issuing the token\n * @param gatekeeperNetwork The network that the gatekeeper belongs to\n * @param seed An 8-byte seed array, used to add multiple tokens to the same owner. Must be unique to each token, if present\n * @param expireTime The unix timestamp at which the token is no longer valid\n */\n\nfunction issueVanilla(gatewayTokenAccount, payer, gatekeeperAccount, owner, gatekeeperAuthority, gatekeeperNetwork, seed, expireTime) {\n  const keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: gatewayTokenAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: owner,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperNetwork,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = GatewayInstruction.issueVanilla(seed, expireTime).encode();\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId: constants_1.PROGRAM_ID,\n    data\n  });\n}\n\nexports.issueVanilla = issueVanilla;\n\nconst getStateChangeAccountMeta = (gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) => [{\n  pubkey: gatewayTokenAccount,\n  isSigner: false,\n  isWritable: true\n}, {\n  pubkey: gatekeeperAuthority,\n  isSigner: true,\n  isWritable: false\n}, {\n  pubkey: gatekeeperAccount,\n  isSigner: false,\n  isWritable: false\n}];\n/**\n * Revoke a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to revoke\n * @param gatekeeperAuthority The gatekeeper revoking the token (must be in the same network as the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper revoking the token\n */\n\n\nfunction revoke(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n  const data = GatewayInstruction.revoke().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId: constants_1.PROGRAM_ID,\n    data\n  });\n}\n\nexports.revoke = revoke;\n/**\n * Freeze a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to freeze\n * @param gatekeeperAuthority The gatekeeper freezing the token (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper freezing the token\n */\n\nfunction freeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n  const data = GatewayInstruction.freeze().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId: constants_1.PROGRAM_ID,\n    data\n  });\n}\n\nexports.freeze = freeze;\n/**\n * Unfreeze a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to unfreeze\n * @param gatekeeperAuthority The gatekeeper unfreezing the token (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper unfreezing the token\n */\n\nfunction unfreeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n  const data = GatewayInstruction.unfreeze().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId: constants_1.PROGRAM_ID,\n    data\n  });\n}\n\nexports.unfreeze = unfreeze;\n/**\n * Update the expiry time of a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to be updated (must have an expiry time)\n * @param gatekeeperAuthority The gatekeeper (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper\n * @param expireTime The new expiry time\n */\n\nfunction updateExpiry(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount, expireTime) {\n  const keys = [{\n    pubkey: gatewayTokenAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = GatewayInstruction.updateExpiry(expireTime).encode();\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId: constants_1.PROGRAM_ID,\n    data\n  });\n}\n\nexports.updateExpiry = updateExpiry;\nsolanaBorsh_1.SCHEMA.set(GatewayInstruction, {\n  kind: \"enum\",\n  field: \"enum\",\n  values: [[\"addGatekeeper\", AddGatekeeper], [\"issueVanilla\", IssueVanilla], [\"setState\", SetState], [\"updateExpiry\", UpdateExpiry], [\"revokeGatekeeper\", RevokeGatekeeper]]\n});\nsolanaBorsh_1.SCHEMA.set(AddGatekeeper, {\n  kind: \"struct\",\n  fields: []\n});\nsolanaBorsh_1.SCHEMA.set(IssueVanilla, {\n  kind: \"struct\",\n  fields: [[\"seed\", {\n    kind: \"option\",\n    type: [8]\n  }], [\"expireTime\", {\n    kind: \"option\",\n    type: \"u64\"\n  }]]\n});\nsolanaBorsh_1.SCHEMA.set(SetState, {\n  kind: \"struct\",\n  fields: [[\"state\", GatewayTokenData_1.GatewayTokenState]]\n});\nsolanaBorsh_1.SCHEMA.set(UpdateExpiry, {\n  kind: \"struct\",\n  fields: [[\"expireTime\", \"u64\"]]\n});\nsolanaBorsh_1.SCHEMA.set(RevokeGatekeeper, {\n  kind: \"struct\",\n  fields: []\n});","map":{"version":3,"sources":["../../src/lib/instruction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateExpiry = exports.unfreeze = exports.freeze = exports.revoke = exports.issueVanilla = exports.revokeGatekeeper = exports.addGatekeeper = exports.GatewayInstruction = void 0;\nconst solanaBorsh_1 = require(\"./solanaBorsh\");\nconst constants_1 = require(\"./constants\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst GatewayTokenData_1 = require(\"./GatewayTokenData\");\n/**\n * Creates instructions to send to the gateway program.\n *\n * Must match solana/program/src/instruction.rs\n */\nclass AddGatekeeper extends solanaBorsh_1.Assignable {\n}\nclass IssueVanilla extends solanaBorsh_1.Assignable {\n}\nclass SetState extends solanaBorsh_1.Assignable {\n}\nclass UpdateExpiry extends solanaBorsh_1.Assignable {\n}\nclass RevokeGatekeeper extends solanaBorsh_1.Assignable {\n}\nclass GatewayInstruction extends solanaBorsh_1.Enum {\n    static addGatekeeper() {\n        return new GatewayInstruction({\n            addGatekeeper: new AddGatekeeper({}),\n        });\n    }\n    static issueVanilla(seed, expireTime) {\n        return new GatewayInstruction({\n            issueVanilla: new IssueVanilla({ seed, expireTime }),\n        });\n    }\n    static revoke() {\n        return new GatewayInstruction({\n            setState: new SetState({\n                state: new GatewayTokenData_1.GatewayTokenState({ revoked: new GatewayTokenData_1.Revoked({}) }),\n            }),\n        });\n    }\n    static freeze() {\n        return new GatewayInstruction({\n            setState: new SetState({\n                state: new GatewayTokenData_1.GatewayTokenState({ frozen: new GatewayTokenData_1.Frozen({}) }),\n            }),\n        });\n    }\n    static unfreeze() {\n        return new GatewayInstruction({\n            setState: new SetState({\n                state: new GatewayTokenData_1.GatewayTokenState({ active: new GatewayTokenData_1.Active({}) }),\n            }),\n        });\n    }\n    static updateExpiry(expireTime) {\n        return new GatewayInstruction({\n            updateExpiry: new UpdateExpiry({\n                expireTime,\n            }),\n        });\n    }\n    static revokeGatekeeper() {\n        return new GatewayInstruction({\n            revokeGatekeeper: new RevokeGatekeeper({}),\n        });\n    }\n}\nexports.GatewayInstruction = GatewayInstruction;\n/**\n * Add a gatekeeper to a gatekeeper network.\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\n *\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\n * @param gatekeeperAccount An uninitialised gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\n * @param gatekeeperAuthority The gatekeeper to add to the network\n * @param network The gatekeeper network that the account is being added to.\n */\nfunction addGatekeeper(payer, gatekeeperAccount, gatekeeperAuthority, network) {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: gatekeeperAccount, isSigner: false, isWritable: true },\n        { pubkey: gatekeeperAuthority, isSigner: false, isWritable: false },\n        { pubkey: network, isSigner: true, isWritable: false },\n        { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n        { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },\n    ];\n    const data = GatewayInstruction.addGatekeeper().encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.addGatekeeper = addGatekeeper;\n/**\n * Removes a gatekeeper from a gatekeeper network.\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\n *\n * @param funds_to The account the gatekeeper account's rent goes to\n * @param gatekeeperAccount The gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\n * @param gatekeeperAuthority The gatekeeper to remove from the network\n * @param network The gatekeeper network that the account is being removed from.\n */\nfunction revokeGatekeeper(funds_to, gatekeeperAccount, gatekeeperAuthority, network) {\n    const keys = [\n        { pubkey: funds_to, isSigner: false, isWritable: true },\n        { pubkey: gatekeeperAccount, isSigner: false, isWritable: true },\n        { pubkey: gatekeeperAuthority, isSigner: false, isWritable: false },\n        { pubkey: network, isSigner: true, isWritable: false },\n    ];\n    const data = GatewayInstruction.revokeGatekeeper().encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.revokeGatekeeper = revokeGatekeeper;\n/**\n * Issue a gateway token to the owner publicKey. This is a 'vanilla' token, in that it does not\n * rely on any other accounts (e.g. identity accounts) to validate.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount An uninitialised gateway token account PDA. The address must be derived via getGatewayTokenAddressForOwnerAndGatekeeperNetwork\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account).\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper issuing the token\n * @param owner The recipient of the token\n * @param gatekeeperAuthority The gatekeeper issuing the token\n * @param gatekeeperNetwork The network that the gatekeeper belongs to\n * @param seed An 8-byte seed array, used to add multiple tokens to the same owner. Must be unique to each token, if present\n * @param expireTime The unix timestamp at which the token is no longer valid\n */\nfunction issueVanilla(gatewayTokenAccount, payer, gatekeeperAccount, owner, gatekeeperAuthority, gatekeeperNetwork, seed, expireTime) {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: gatewayTokenAccount, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: gatekeeperAccount, isSigner: false, isWritable: false },\n        { pubkey: gatekeeperAuthority, isSigner: true, isWritable: false },\n        { pubkey: gatekeeperNetwork, isSigner: false, isWritable: false },\n        { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n        { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },\n    ];\n    const data = GatewayInstruction.issueVanilla(seed, expireTime).encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.issueVanilla = issueVanilla;\nconst getStateChangeAccountMeta = (gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) => [\n    { pubkey: gatewayTokenAccount, isSigner: false, isWritable: true },\n    { pubkey: gatekeeperAuthority, isSigner: true, isWritable: false },\n    { pubkey: gatekeeperAccount, isSigner: false, isWritable: false },\n];\n/**\n * Revoke a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to revoke\n * @param gatekeeperAuthority The gatekeeper revoking the token (must be in the same network as the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper revoking the token\n */\nfunction revoke(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n    const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n    const data = GatewayInstruction.revoke().encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.revoke = revoke;\n/**\n * Freeze a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to freeze\n * @param gatekeeperAuthority The gatekeeper freezing the token (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper freezing the token\n */\nfunction freeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n    const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n    const data = GatewayInstruction.freeze().encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.freeze = freeze;\n/**\n * Unfreeze a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to unfreeze\n * @param gatekeeperAuthority The gatekeeper unfreezing the token (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper unfreezing the token\n */\nfunction unfreeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n    const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n    const data = GatewayInstruction.unfreeze().encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.unfreeze = unfreeze;\n/**\n * Update the expiry time of a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to be updated (must have an expiry time)\n * @param gatekeeperAuthority The gatekeeper (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper\n * @param expireTime The new expiry time\n */\nfunction updateExpiry(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount, expireTime) {\n    const keys = [\n        { pubkey: gatewayTokenAccount, isSigner: false, isWritable: true },\n        { pubkey: gatekeeperAuthority, isSigner: true, isWritable: false },\n        { pubkey: gatekeeperAccount, isSigner: false, isWritable: false },\n    ];\n    const data = GatewayInstruction.updateExpiry(expireTime).encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.updateExpiry = updateExpiry;\nsolanaBorsh_1.SCHEMA.set(GatewayInstruction, {\n    kind: \"enum\",\n    field: \"enum\",\n    values: [\n        [\"addGatekeeper\", AddGatekeeper],\n        [\"issueVanilla\", IssueVanilla],\n        [\"setState\", SetState],\n        [\"updateExpiry\", UpdateExpiry],\n        [\"revokeGatekeeper\", RevokeGatekeeper],\n    ],\n});\nsolanaBorsh_1.SCHEMA.set(AddGatekeeper, {\n    kind: \"struct\",\n    fields: [],\n});\nsolanaBorsh_1.SCHEMA.set(IssueVanilla, {\n    kind: \"struct\",\n    fields: [\n        [\"seed\", { kind: \"option\", type: [8] }],\n        [\"expireTime\", { kind: \"option\", type: \"u64\" }],\n    ],\n});\nsolanaBorsh_1.SCHEMA.set(SetState, {\n    kind: \"struct\",\n    fields: [[\"state\", GatewayTokenData_1.GatewayTokenState]],\n});\nsolanaBorsh_1.SCHEMA.set(UpdateExpiry, {\n    kind: \"struct\",\n    fields: [[\"expireTime\", \"u64\"]],\n});\nsolanaBorsh_1.SCHEMA.set(RevokeGatekeeper, {\n    kind: \"struct\",\n    fields: [],\n});\n//# sourceMappingURL=instruction.js.map"]},"metadata":{},"sourceType":"script"}