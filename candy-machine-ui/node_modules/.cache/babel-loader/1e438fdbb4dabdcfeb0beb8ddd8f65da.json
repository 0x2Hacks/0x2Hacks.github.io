{"ast":null,"code":"import { IdlCoder } from \"./idl\";\n/**\n * Encodes and decodes user defined types.\n */\n\nexport class TypesCoder {\n  constructor(idl) {\n    if (idl.types === undefined) {\n      this.layouts = new Map();\n      return;\n    }\n\n    const types = idl.types;\n    const layouts = types.map(acc => {\n      return [acc.name, IdlCoder.typeDefLayout(acc, types)];\n    }); // @ts-ignore\n\n    this.layouts = new Map(layouts);\n  }\n\n  encode(accountName, account) {\n    const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n\n    const layout = this.layouts.get(accountName);\n\n    if (!layout) {\n      throw new Error(`Unknown account type: ${accountName}`);\n    }\n\n    const len = layout.encode(account, buffer);\n    return buffer.slice(0, len);\n  }\n\n  decode(accountName, ix) {\n    const layout = this.layouts.get(accountName);\n\n    if (!layout) {\n      throw new Error(`Unknown account type: ${accountName}`);\n    }\n\n    return layout.decode(ix);\n  }\n\n}","map":{"version":3,"sources":["../../../src/coder/types.ts"],"names":[],"mappings":"AAEA,SAAS,QAAT,QAAyB,OAAzB;AAEA;;AAEG;;AACH,OAAM,MAAO,UAAP,CAAiB;AAMrB,EAAA,WAAA,CAAmB,GAAnB,EAA2B;AACzB,QAAI,GAAG,CAAC,KAAJ,KAAc,SAAlB,EAA6B;AAC3B,WAAK,OAAL,GAAe,IAAI,GAAJ,EAAf;AACA;AACD;;AACD,UAAM,KAAK,GAAG,GAAG,CAAC,KAAlB;AACA,UAAM,OAAO,GAAG,KAAK,CAAC,GAAN,CAAW,GAAD,IAAQ;AAChC,aAAO,CAAC,GAAG,CAAC,IAAL,EAAW,QAAQ,CAAC,aAAT,CAAuB,GAAvB,EAA4B,KAA5B,CAAX,CAAP;AACD,KAFe,CAAhB,CANyB,CAUzB;;AACA,SAAK,OAAL,GAAe,IAAI,GAAJ,CAAQ,OAAR,CAAf;AACD;;AAEM,EAAA,MAAM,CAAU,WAAV,EAA+B,OAA/B,EAAyC;AACpD,UAAM,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,IAAb,CAAf,CADoD,CACjB;;AACnC,UAAM,MAAM,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAf;;AACA,QAAI,CAAC,MAAL,EAAa;AACX,YAAM,IAAI,KAAJ,CAAU,yBAAyB,WAAW,EAA9C,CAAN;AACD;;AACD,UAAM,GAAG,GAAG,MAAM,CAAC,MAAP,CAAc,OAAd,EAAuB,MAAvB,CAAZ;AACA,WAAO,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,GAAhB,CAAP;AACD;;AAEM,EAAA,MAAM,CAAU,WAAV,EAA+B,EAA/B,EAAyC;AACpD,UAAM,MAAM,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAf;;AACA,QAAI,CAAC,MAAL,EAAa;AACX,YAAM,IAAI,KAAJ,CAAU,yBAAyB,WAAW,EAA9C,CAAN;AACD;;AACD,WAAO,MAAM,CAAC,MAAP,CAAc,EAAd,CAAP;AACD;;AApCoB","sourceRoot":"","sourcesContent":["import { IdlCoder } from \"./idl\";\n/**\n * Encodes and decodes user defined types.\n */\nexport class TypesCoder {\n    constructor(idl) {\n        if (idl.types === undefined) {\n            this.layouts = new Map();\n            return;\n        }\n        const types = idl.types;\n        const layouts = types.map((acc) => {\n            return [acc.name, IdlCoder.typeDefLayout(acc, types)];\n        });\n        // @ts-ignore\n        this.layouts = new Map(layouts);\n    }\n    encode(accountName, account) {\n        const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n        const layout = this.layouts.get(accountName);\n        if (!layout) {\n            throw new Error(`Unknown account type: ${accountName}`);\n        }\n        const len = layout.encode(account, buffer);\n        return buffer.slice(0, len);\n    }\n    decode(accountName, ix) {\n        const layout = this.layouts.get(accountName);\n        if (!layout) {\n            throw new Error(`Unknown account type: ${accountName}`);\n        }\n        return layout.decode(ix);\n    }\n}\n//# sourceMappingURL=types.js.map"]},"metadata":{},"sourceType":"module"}