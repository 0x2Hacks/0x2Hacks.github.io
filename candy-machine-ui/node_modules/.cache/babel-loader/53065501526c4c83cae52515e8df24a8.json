{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_1 = require(\"react\");\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\n\nconst usePowo = (_ref, state, dispatch) => {\n  let {\n    wallet,\n    chainImplementation\n  } = _ref;\n  const {\n    powoFinished,\n    walletPowoInProgress,\n    refreshInProgress\n  } = state;\n  const {\n    expectWalletConnected\n  } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n  /**\n   * wait until the user has confirmed they want to continue the proof of wallet ownership flow\n   * then resolve the promise\n   */\n\n  const waitForConfirmPOWO = (0, react_1.useCallback)( // eslint-disable-next-line @typescript-eslint/no-shadow\n  async payload => {\n    logger_1.default.debug('usePowo waitForConfirmPOWO before expectWalletConnected', {\n      payload\n    });\n    expectWalletConnected();\n    return new Promise(resolve => {\n      logger_1.default.debug('usePowo waitForConfirmPOWO', {\n        powoFinished\n      });\n\n      if (powoFinished) {\n        resolve(payload);\n      }\n    });\n  }, [powoFinished, expectWalletConnected]);\n  /**\n   * wait until the user has provided proof of wallet ownership using their connected wallet\n   * if this was triggered from the refresh flow, dispatch events to indicate progress\n   * if not, resolve a promise when the proof is ready\n   */\n\n  const waitForPOWO = (0, react_1.useCallback)(async ( // eslint-disable-next-line @typescript-eslint/no-shadow\n  payload) => {\n    logger_1.default.debug('usePowo waitForPOWO before expectWalletConnected');\n    const connectedWallet = expectWalletConnected();\n\n    if (connectedWallet) {\n      logger_1.default.debug('usePowo waitForPOWO', {\n        payload,\n        publicKey: connectedWallet.publicKey\n      });\n      return new Promise(resolve => {\n        logger_1.default.debug('usePowo waitForPOWO walletPowoInProgress', {\n          walletPowoInProgress,\n          refreshInProgress\n        });\n        chainImplementation.proveWalletOwnership().then(proof => {\n          resolve({\n            proof,\n            payload\n          });\n          dispatch({\n            type: 'walletPowoComplete'\n          });\n          dispatch({\n            type: 'civicPass_check_token_status'\n          });\n        }).catch(error => {\n          logger_1.default.error('Proof of wallet ownership error: ', error);\n          dispatch({\n            type: 'walletPowoIncomplete'\n          });\n        });\n      });\n    }\n\n    return {};\n  }, [expectWalletConnected, walletPowoInProgress, chainImplementation]);\n  const waitForHandleTransaction = (0, react_1.useCallback)(async transaction => {\n    await chainImplementation.handleUserSignedTransaction(transaction);\n    dispatch({\n      type: 'walletPowoComplete'\n    });\n    dispatch({\n      type: 'civicPass_check_token_status'\n    });\n  }, [walletPowoInProgress, chainImplementation]);\n  return {\n    waitForConfirmPOWO,\n    waitForHandleTransaction,\n    waitForPOWO\n  };\n};\n\nexports.default = usePowo;","map":{"version":3,"sources":["/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@civic/common-gateway-react/dist/esm/useHooks/usePOWO.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","react_1","require","logger_1","useWalletHooks_1","usePowo","state","dispatch","wallet","chainImplementation","powoFinished","walletPowoInProgress","refreshInProgress","expectWalletConnected","default","waitForConfirmPOWO","useCallback","payload","debug","Promise","resolve","waitForPOWO","connectedWallet","publicKey","proveWalletOwnership","then","proof","type","catch","error","waitForHandleTransaction","transaction","handleUserSignedTransaction"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = require(\"react\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\nconst usePowo = ({ wallet, chainImplementation }, state, dispatch) => {\n    const { powoFinished, walletPowoInProgress, refreshInProgress } = state;\n    const { expectWalletConnected } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n    /**\n     * wait until the user has confirmed they want to continue the proof of wallet ownership flow\n     * then resolve the promise\n     */\n    const waitForConfirmPOWO = (0, react_1.useCallback)(\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    async (payload) => {\n        logger_1.default.debug('usePowo waitForConfirmPOWO before expectWalletConnected', {\n            payload,\n        });\n        expectWalletConnected();\n        return new Promise((resolve) => {\n            logger_1.default.debug('usePowo waitForConfirmPOWO', { powoFinished });\n            if (powoFinished) {\n                resolve(payload);\n            }\n        });\n    }, [powoFinished, expectWalletConnected]);\n    /**\n     * wait until the user has provided proof of wallet ownership using their connected wallet\n     * if this was triggered from the refresh flow, dispatch events to indicate progress\n     * if not, resolve a promise when the proof is ready\n     */\n    const waitForPOWO = (0, react_1.useCallback)(async (\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    payload) => {\n        logger_1.default.debug('usePowo waitForPOWO before expectWalletConnected');\n        const connectedWallet = expectWalletConnected();\n        if (connectedWallet) {\n            logger_1.default.debug('usePowo waitForPOWO', {\n                payload,\n                publicKey: connectedWallet.publicKey,\n            });\n            return new Promise((resolve) => {\n                logger_1.default.debug('usePowo waitForPOWO walletPowoInProgress', {\n                    walletPowoInProgress,\n                    refreshInProgress,\n                });\n                chainImplementation\n                    .proveWalletOwnership()\n                    .then((proof) => {\n                    resolve({ proof, payload });\n                    dispatch({ type: 'walletPowoComplete' });\n                    dispatch({ type: 'civicPass_check_token_status' });\n                })\n                    .catch((error) => {\n                    logger_1.default.error('Proof of wallet ownership error: ', error);\n                    dispatch({ type: 'walletPowoIncomplete' });\n                });\n            });\n        }\n        return {};\n    }, [expectWalletConnected, walletPowoInProgress, chainImplementation]);\n    const waitForHandleTransaction = (0, react_1.useCallback)(async (transaction) => {\n        await chainImplementation.handleUserSignedTransaction(transaction);\n        dispatch({ type: 'walletPowoComplete' });\n        dispatch({ type: 'civicPass_check_token_status' });\n    }, [walletPowoInProgress, chainImplementation]);\n    return {\n        waitForConfirmPOWO,\n        waitForHandleTransaction,\n        waitForPOWO,\n    };\n};\nexports.default = usePowo;\n"]},"metadata":{},"sourceType":"script"}