{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.remoteSignWindowEventEmitterImplementation = exports.RemoteSignWindowEventEmitter = exports.CivicSignEventTypeRequest = exports.CivicSignEventTypeResponse = exports.eventEmitter = void 0;\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst constants_1 = require(\"../constants\");\n\nconst eventEmitter = window => {\n  return {\n    postMessage: (message, targetOrigin) => {\n      window.postMessage(message, targetOrigin);\n    }\n  };\n};\n\nexports.eventEmitter = eventEmitter; // TODO: Duplicate types in CivicSign\n// Move to a central repo or use TS paths\n\nvar CivicSignEventTypeResponse;\n\n(function (CivicSignEventTypeResponse) {\n  CivicSignEventTypeResponse[\"RESPONSE_PUBLIC_KEY\"] = \"RESPONSE_PUBLIC_KEY\";\n  CivicSignEventTypeResponse[\"RESPONSE_DID\"] = \"RESPONSE_DID\";\n  CivicSignEventTypeResponse[\"RESPONSE_SIGNED_PROOF\"] = \"RESPONSE_SIGNED_PROOF\";\n})(CivicSignEventTypeResponse = exports.CivicSignEventTypeResponse || (exports.CivicSignEventTypeResponse = {}));\n\nvar CivicSignEventTypeRequest;\n\n(function (CivicSignEventTypeRequest) {\n  CivicSignEventTypeRequest[\"REQUEST_PUBLIC_KEY\"] = \"REQUEST_PUBLIC_KEY\";\n  CivicSignEventTypeRequest[\"REQUEST_DID\"] = \"REQUEST_DID\";\n  CivicSignEventTypeRequest[\"REQUEST_SIGNED_PROOF\"] = \"REQUEST_SIGNED_PROOF\";\n})(CivicSignEventTypeRequest = exports.CivicSignEventTypeRequest || (exports.CivicSignEventTypeRequest = {}));\n\nclass RemoteSignWindowEventEmitter {\n  constructor(targetWindow) {\n    this.targetWindow = targetWindow;\n  }\n\n  sendPublicKey(publicKey) {\n    this.emit({\n      event: CivicSignEventTypeResponse.RESPONSE_PUBLIC_KEY,\n      data: publicKey\n    });\n  }\n\n  sendDid(did) {\n    this.emit({\n      event: CivicSignEventTypeResponse.RESPONSE_DID,\n      data: did\n    });\n  }\n\n  sendSignedProof(proof) {\n    this.emit({\n      event: CivicSignEventTypeResponse.RESPONSE_SIGNED_PROOF,\n      data: proof\n    });\n  }\n\n  emit(event) {\n    this.targetWindow.postMessage(event, '*');\n  }\n\n}\n\nexports.RemoteSignWindowEventEmitter = RemoteSignWindowEventEmitter;\n\nconst remoteSignWindowEventEmitterImplementation = () => {\n  var _a;\n\n  const iFrameWindow = (_a = document.getElementById(constants_1.IFRAME_ID)) === null || _a === void 0 ? void 0 : _a.contentWindow;\n\n  if (!iFrameWindow) {\n    logger_1.default.debug('no iFrame window present');\n    return null;\n  }\n\n  return new RemoteSignWindowEventEmitter((0, exports.eventEmitter)(iFrameWindow));\n};\n\nexports.remoteSignWindowEventEmitterImplementation = remoteSignWindowEventEmitterImplementation;","map":{"version":3,"sources":["/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@civic/common-gateway-react/dist/esm/utils/remoteSign.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","remoteSignWindowEventEmitterImplementation","RemoteSignWindowEventEmitter","CivicSignEventTypeRequest","CivicSignEventTypeResponse","eventEmitter","logger_1","require","constants_1","window","postMessage","message","targetOrigin","constructor","targetWindow","sendPublicKey","publicKey","emit","event","RESPONSE_PUBLIC_KEY","data","sendDid","did","RESPONSE_DID","sendSignedProof","proof","RESPONSE_SIGNED_PROOF","_a","iFrameWindow","document","getElementById","IFRAME_ID","contentWindow","default","debug"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.remoteSignWindowEventEmitterImplementation = exports.RemoteSignWindowEventEmitter = exports.CivicSignEventTypeRequest = exports.CivicSignEventTypeResponse = exports.eventEmitter = void 0;\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst constants_1 = require(\"../constants\");\nconst eventEmitter = (window) => {\n    return {\n        postMessage: (message, targetOrigin) => {\n            window.postMessage(message, targetOrigin);\n        },\n    };\n};\nexports.eventEmitter = eventEmitter;\n// TODO: Duplicate types in CivicSign\n// Move to a central repo or use TS paths\nvar CivicSignEventTypeResponse;\n(function (CivicSignEventTypeResponse) {\n    CivicSignEventTypeResponse[\"RESPONSE_PUBLIC_KEY\"] = \"RESPONSE_PUBLIC_KEY\";\n    CivicSignEventTypeResponse[\"RESPONSE_DID\"] = \"RESPONSE_DID\";\n    CivicSignEventTypeResponse[\"RESPONSE_SIGNED_PROOF\"] = \"RESPONSE_SIGNED_PROOF\";\n})(CivicSignEventTypeResponse = exports.CivicSignEventTypeResponse || (exports.CivicSignEventTypeResponse = {}));\nvar CivicSignEventTypeRequest;\n(function (CivicSignEventTypeRequest) {\n    CivicSignEventTypeRequest[\"REQUEST_PUBLIC_KEY\"] = \"REQUEST_PUBLIC_KEY\";\n    CivicSignEventTypeRequest[\"REQUEST_DID\"] = \"REQUEST_DID\";\n    CivicSignEventTypeRequest[\"REQUEST_SIGNED_PROOF\"] = \"REQUEST_SIGNED_PROOF\";\n})(CivicSignEventTypeRequest = exports.CivicSignEventTypeRequest || (exports.CivicSignEventTypeRequest = {}));\nclass RemoteSignWindowEventEmitter {\n    constructor(targetWindow) {\n        this.targetWindow = targetWindow;\n    }\n    sendPublicKey(publicKey) {\n        this.emit({\n            event: CivicSignEventTypeResponse.RESPONSE_PUBLIC_KEY,\n            data: publicKey,\n        });\n    }\n    sendDid(did) {\n        this.emit({\n            event: CivicSignEventTypeResponse.RESPONSE_DID,\n            data: did,\n        });\n    }\n    sendSignedProof(proof) {\n        this.emit({\n            event: CivicSignEventTypeResponse.RESPONSE_SIGNED_PROOF,\n            data: proof,\n        });\n    }\n    emit(event) {\n        this.targetWindow.postMessage(event, '*');\n    }\n}\nexports.RemoteSignWindowEventEmitter = RemoteSignWindowEventEmitter;\nconst remoteSignWindowEventEmitterImplementation = () => {\n    var _a;\n    const iFrameWindow = (_a = document.getElementById(constants_1.IFRAME_ID)) === null || _a === void 0 ? void 0 : _a.contentWindow;\n    if (!iFrameWindow) {\n        logger_1.default.debug('no iFrame window present');\n        return null;\n    }\n    return new RemoteSignWindowEventEmitter((0, exports.eventEmitter)(iFrameWindow));\n};\nexports.remoteSignWindowEventEmitterImplementation = remoteSignWindowEventEmitterImplementation;\n"]},"metadata":{},"sourceType":"script"}