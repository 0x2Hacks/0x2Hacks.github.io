{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _asyncToGenerator = require(\"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = require(\"react\");\n\nvar logger_1 = __importDefault(require(\"../logger\"));\n\nvar useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\n\nvar usePowo = function usePowo(_ref, state, dispatch) {\n  var wallet = _ref.wallet,\n      chainImplementation = _ref.chainImplementation;\n  var powoFinished = state.powoFinished,\n      walletPowoInProgress = state.walletPowoInProgress,\n      refreshInProgress = state.refreshInProgress;\n\n  var _ref2 = (0, useWalletHooks_1.default)(wallet, state, dispatch),\n      expectWalletConnected = _ref2.expectWalletConnected;\n  /**\n   * wait until the user has confirmed they want to continue the proof of wallet ownership flow\n   * then resolve the promise\n   */\n\n\n  var waitForConfirmPOWO = (0, react_1.useCallback)(\n  /*#__PURE__*/\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(payload) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              logger_1.default.debug('usePowo waitForConfirmPOWO before expectWalletConnected', {\n                payload: payload\n              });\n              expectWalletConnected();\n              return _context.abrupt(\"return\", new Promise(function (resolve) {\n                logger_1.default.debug('usePowo waitForConfirmPOWO', {\n                  powoFinished: powoFinished\n                });\n\n                if (powoFinished) {\n                  resolve(payload);\n                }\n              }));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [powoFinished, expectWalletConnected]);\n  /**\n   * wait until the user has provided proof of wallet ownership using their connected wallet\n   * if this was triggered from the refresh flow, dispatch events to indicate progress\n   * if not, resolve a promise when the proof is ready\n   */\n\n  var waitForPOWO = (0, react_1.useCallback)( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2( // eslint-disable-next-line @typescript-eslint/no-shadow\n    payload) {\n      var connectedWallet;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              logger_1.default.debug('usePowo waitForPOWO before expectWalletConnected');\n              connectedWallet = expectWalletConnected();\n\n              if (!connectedWallet) {\n                _context2.next = 5;\n                break;\n              }\n\n              logger_1.default.debug('usePowo waitForPOWO', {\n                payload: payload,\n                publicKey: connectedWallet.publicKey\n              });\n              return _context2.abrupt(\"return\", new Promise(function (resolve) {\n                logger_1.default.debug('usePowo waitForPOWO walletPowoInProgress', {\n                  walletPowoInProgress: walletPowoInProgress,\n                  refreshInProgress: refreshInProgress\n                });\n                chainImplementation.proveWalletOwnership().then(function (proof) {\n                  resolve({\n                    proof: proof,\n                    payload: payload\n                  });\n                  dispatch({\n                    type: 'walletPowoComplete'\n                  });\n                  dispatch({\n                    type: 'civicPass_check_token_status'\n                  });\n                }).catch(function (error) {\n                  logger_1.default.error('Proof of wallet ownership error: ', error);\n                  dispatch({\n                    type: 'walletPowoIncomplete'\n                  });\n                });\n              }));\n\n            case 5:\n              return _context2.abrupt(\"return\", {});\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), [expectWalletConnected, walletPowoInProgress, chainImplementation]);\n  var waitForHandleTransaction = (0, react_1.useCallback)( /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(transaction) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return chainImplementation.handleUserSignedTransaction(transaction);\n\n            case 2:\n              dispatch({\n                type: 'walletPowoComplete'\n              });\n              dispatch({\n                type: 'civicPass_check_token_status'\n              });\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref5.apply(this, arguments);\n    };\n  }(), [walletPowoInProgress, chainImplementation]);\n  return {\n    waitForConfirmPOWO: waitForConfirmPOWO,\n    waitForHandleTransaction: waitForHandleTransaction,\n    waitForPOWO: waitForPOWO\n  };\n};\n\nexports.default = usePowo;","map":{"version":3,"sources":["/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@civic/common-gateway-react/dist/esm/useHooks/usePOWO.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","react_1","require","logger_1","useWalletHooks_1","usePowo","state","dispatch","wallet","chainImplementation","powoFinished","walletPowoInProgress","refreshInProgress","default","expectWalletConnected","waitForConfirmPOWO","useCallback","payload","debug","Promise","resolve","waitForPOWO","connectedWallet","publicKey","proveWalletOwnership","then","proof","type","catch","error","waitForHandleTransaction","transaction","handleUserSignedTransaction"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = require(\"react\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\nconst usePowo = ({ wallet, chainImplementation }, state, dispatch) => {\n    const { powoFinished, walletPowoInProgress, refreshInProgress } = state;\n    const { expectWalletConnected } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n    /**\n     * wait until the user has confirmed they want to continue the proof of wallet ownership flow\n     * then resolve the promise\n     */\n    const waitForConfirmPOWO = (0, react_1.useCallback)(\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    async (payload) => {\n        logger_1.default.debug('usePowo waitForConfirmPOWO before expectWalletConnected', {\n            payload,\n        });\n        expectWalletConnected();\n        return new Promise((resolve) => {\n            logger_1.default.debug('usePowo waitForConfirmPOWO', { powoFinished });\n            if (powoFinished) {\n                resolve(payload);\n            }\n        });\n    }, [powoFinished, expectWalletConnected]);\n    /**\n     * wait until the user has provided proof of wallet ownership using their connected wallet\n     * if this was triggered from the refresh flow, dispatch events to indicate progress\n     * if not, resolve a promise when the proof is ready\n     */\n    const waitForPOWO = (0, react_1.useCallback)(async (\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    payload) => {\n        logger_1.default.debug('usePowo waitForPOWO before expectWalletConnected');\n        const connectedWallet = expectWalletConnected();\n        if (connectedWallet) {\n            logger_1.default.debug('usePowo waitForPOWO', {\n                payload,\n                publicKey: connectedWallet.publicKey,\n            });\n            return new Promise((resolve) => {\n                logger_1.default.debug('usePowo waitForPOWO walletPowoInProgress', {\n                    walletPowoInProgress,\n                    refreshInProgress,\n                });\n                chainImplementation\n                    .proveWalletOwnership()\n                    .then((proof) => {\n                    resolve({ proof, payload });\n                    dispatch({ type: 'walletPowoComplete' });\n                    dispatch({ type: 'civicPass_check_token_status' });\n                })\n                    .catch((error) => {\n                    logger_1.default.error('Proof of wallet ownership error: ', error);\n                    dispatch({ type: 'walletPowoIncomplete' });\n                });\n            });\n        }\n        return {};\n    }, [expectWalletConnected, walletPowoInProgress, chainImplementation]);\n    const waitForHandleTransaction = (0, react_1.useCallback)(async (transaction) => {\n        await chainImplementation.handleUserSignedTransaction(transaction);\n        dispatch({ type: 'walletPowoComplete' });\n        dispatch({ type: 'civicPass_check_token_status' });\n    }, [walletPowoInProgress, chainImplementation]);\n    return {\n        waitForConfirmPOWO,\n        waitForHandleTransaction,\n        waitForPOWO,\n    };\n};\nexports.default = usePowo;\n"]},"metadata":{},"sourceType":"script"}