{"ast":null,"code":"var _slicedToArray = require(\"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\n// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nvar satisfies = require('../functions/satisfies.js');\n\nvar compare = require('../functions/compare.js');\n\nmodule.exports = function (versions, range, options) {\n  var set = [];\n  var min = null;\n  var prev = null;\n  var v = versions.sort(function (a, b) {\n    return compare(a, b, options);\n  });\n\n  var _iterator = _createForOfIteratorHelper(v),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var version = _step.value;\n      var included = satisfies(version, range, options);\n\n      if (included) {\n        prev = version;\n        if (!min) min = version;\n      } else {\n        if (prev) {\n          set.push([min, prev]);\n        }\n\n        prev = null;\n        min = null;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (min) set.push([min, null]);\n  var ranges = [];\n\n  for (var _i = 0, _set = set; _i < _set.length; _i++) {\n    var _set$_i = _slicedToArray(_set[_i], 2),\n        _min = _set$_i[0],\n        max = _set$_i[1];\n\n    if (_min === max) ranges.push(_min);else if (!max && _min === v[0]) ranges.push('*');else if (!max) ranges.push(\">=\".concat(_min));else if (_min === v[0]) ranges.push(\"<=\".concat(max));else ranges.push(\"\".concat(_min, \" - \").concat(max));\n  }\n\n  var simplified = ranges.join(' || ');\n  var original = typeof range.raw === 'string' ? range.raw : String(range);\n  return simplified.length < original.length ? simplified : range;\n};","map":{"version":3,"sources":["/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@ledgerhq/devices/node_modules/semver/ranges/simplify.js"],"names":["satisfies","require","compare","module","exports","versions","range","options","set","min","prev","v","sort","a","b","version","included","push","ranges","max","simplified","join","original","raw","String","length"],"mappings":";;;;AAAA;AACA;AACA;AACA,IAAMA,SAAS,GAAGC,OAAO,CAAC,2BAAD,CAAzB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,yBAAD,CAAvB;;AACAE,MAAM,CAACC,OAAP,GAAiB,UAACC,QAAD,EAAWC,KAAX,EAAkBC,OAAlB,EAA8B;AAC7C,MAAMC,GAAG,GAAG,EAAZ;AACA,MAAIC,GAAG,GAAG,IAAV;AACA,MAAIC,IAAI,GAAG,IAAX;AACA,MAAMC,CAAC,GAAGN,QAAQ,CAACO,IAAT,CAAc,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUZ,OAAO,CAACW,CAAD,EAAIC,CAAJ,EAAOP,OAAP,CAAjB;AAAA,GAAd,CAAV;;AAJ6C,6CAKvBI,CALuB;AAAA;;AAAA;AAK7C,wDAAyB;AAAA,UAAdI,OAAc;AACvB,UAAMC,QAAQ,GAAGhB,SAAS,CAACe,OAAD,EAAUT,KAAV,EAAiBC,OAAjB,CAA1B;;AACA,UAAIS,QAAJ,EAAc;AACZN,QAAAA,IAAI,GAAGK,OAAP;AACA,YAAI,CAACN,GAAL,EACEA,GAAG,GAAGM,OAAN;AACH,OAJD,MAIO;AACL,YAAIL,IAAJ,EAAU;AACRF,UAAAA,GAAG,CAACS,IAAJ,CAAS,CAACR,GAAD,EAAMC,IAAN,CAAT;AACD;;AACDA,QAAAA,IAAI,GAAG,IAAP;AACAD,QAAAA,GAAG,GAAG,IAAN;AACD;AACF;AAlB4C;AAAA;AAAA;AAAA;AAAA;;AAmB7C,MAAIA,GAAJ,EACED,GAAG,CAACS,IAAJ,CAAS,CAACR,GAAD,EAAM,IAAN,CAAT;AAEF,MAAMS,MAAM,GAAG,EAAf;;AACA,0BAAyBV,GAAzB,0BAA8B;AAAzB;AAAA,QAAOC,IAAP;AAAA,QAAYU,GAAZ;;AACH,QAAIV,IAAG,KAAKU,GAAZ,EACED,MAAM,CAACD,IAAP,CAAYR,IAAZ,EADF,KAEK,IAAI,CAACU,GAAD,IAAQV,IAAG,KAAKE,CAAC,CAAC,CAAD,CAArB,EACHO,MAAM,CAACD,IAAP,CAAY,GAAZ,EADG,KAEA,IAAI,CAACE,GAAL,EACHD,MAAM,CAACD,IAAP,aAAiBR,IAAjB,GADG,KAEA,IAAIA,IAAG,KAAKE,CAAC,CAAC,CAAD,CAAb,EACHO,MAAM,CAACD,IAAP,aAAiBE,GAAjB,GADG,KAGHD,MAAM,CAACD,IAAP,WAAeR,IAAf,gBAAwBU,GAAxB;AACH;;AACD,MAAMC,UAAU,GAAGF,MAAM,CAACG,IAAP,CAAY,MAAZ,CAAnB;AACA,MAAMC,QAAQ,GAAG,OAAOhB,KAAK,CAACiB,GAAb,KAAqB,QAArB,GAAgCjB,KAAK,CAACiB,GAAtC,GAA4CC,MAAM,CAAClB,KAAD,CAAnE;AACA,SAAOc,UAAU,CAACK,MAAX,GAAoBH,QAAQ,CAACG,MAA7B,GAAsCL,UAAtC,GAAmDd,KAA1D;AACD,CAtCD","sourcesContent":["// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\nmodule.exports = (versions, range, options) => {\n  const set = []\n  let min = null\n  let prev = null\n  const v = versions.sort((a, b) => compare(a, b, options))\n  for (const version of v) {\n    const included = satisfies(version, range, options)\n    if (included) {\n      prev = version\n      if (!min)\n        min = version\n    } else {\n      if (prev) {\n        set.push([min, prev])\n      }\n      prev = null\n      min = null\n    }\n  }\n  if (min)\n    set.push([min, null])\n\n  const ranges = []\n  for (const [min, max] of set) {\n    if (min === max)\n      ranges.push(min)\n    else if (!max && min === v[0])\n      ranges.push('*')\n    else if (!max)\n      ranges.push(`>=${min}`)\n    else if (min === v[0])\n      ranges.push(`<=${max}`)\n    else\n      ranges.push(`${min} - ${max}`)\n  }\n  const simplified = ranges.join(' || ')\n  const original = typeof range.raw === 'string' ? range.raw : String(range)\n  return simplified.length < original.length ? simplified : range\n}\n"]},"metadata":{},"sourceType":"script"}