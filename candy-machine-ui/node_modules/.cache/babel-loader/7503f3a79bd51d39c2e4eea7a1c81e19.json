{"ast":null,"code":"import _slicedToArray from \"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { WalletNotConnectedError, WalletNotReadyError } from '@solana/wallet-adapter-base';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { WalletNotSelectedError } from './errors';\nimport { useLocalStorage } from './useLocalStorage';\nimport { WalletContext } from './useWallet';\nvar initialState = {\n  wallet: null,\n  adapter: null,\n  ready: false,\n  publicKey: null,\n  connected: false\n};\nexport var WalletProvider = function WalletProvider(_ref) {\n  var children = _ref.children,\n      wallets = _ref.wallets,\n      _ref$autoConnect = _ref.autoConnect,\n      autoConnect = _ref$autoConnect === void 0 ? false : _ref$autoConnect,\n      _ref$onError = _ref.onError,\n      _onError = _ref$onError === void 0 ? function (error) {\n    return console.error(error);\n  } : _ref$onError,\n      _ref$localStorageKey = _ref.localStorageKey,\n      localStorageKey = _ref$localStorageKey === void 0 ? 'walletName' : _ref$localStorageKey;\n\n  var _useLocalStorage = useLocalStorage(localStorageKey, null),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      name = _useLocalStorage2[0],\n      setName = _useLocalStorage2[1];\n\n  var _useState = useState(initialState),\n      _useState2 = _slicedToArray(_useState, 2),\n      _useState2$ = _useState2[0],\n      wallet = _useState2$.wallet,\n      adapter = _useState2$.adapter,\n      ready = _useState2$.ready,\n      publicKey = _useState2$.publicKey,\n      connected = _useState2$.connected,\n      setState = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      connecting = _useState4[0],\n      setConnecting = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      disconnecting = _useState6[0],\n      setDisconnecting = _useState6[1];\n\n  var isConnecting = useRef(false);\n  var isDisconnecting = useRef(false);\n  var isUnloading = useRef(false); // Map of wallet names to wallets\n\n  var walletsByName = useMemo(function () {\n    return wallets.reduce(function (walletsByName, wallet) {\n      walletsByName[wallet.name] = wallet;\n      return walletsByName;\n    }, {});\n  }, [wallets]); // When the selected wallet changes, initialize the state\n\n  useEffect(function () {\n    var wallet = name && walletsByName[name] || null;\n    var adapter = wallet && wallet.adapter();\n\n    if (adapter) {\n      var _ready = adapter.ready,\n          _publicKey = adapter.publicKey,\n          _connected = adapter.connected;\n      setState({\n        wallet: wallet,\n        adapter: adapter,\n        connected: _connected,\n        publicKey: _publicKey,\n        ready: _ready\n      });\n    } else {\n      setState(initialState);\n    }\n  }, [name, walletsByName, setState]); // If autoConnect is enabled, try to connect when the adapter changes and is ready\n\n  useEffect(function () {\n    if (isConnecting.current || connecting || connected || !autoConnect || !adapter || !ready) return;\n\n    (function () {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                isConnecting.current = true;\n                setConnecting(true);\n                _context.prev = 2;\n                _context.next = 5;\n                return adapter.connect();\n\n              case 5:\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](2);\n                // Clear the selected wallet\n                setName(null); // Don't throw error, but onError will still be called\n\n              case 10:\n                _context.prev = 10;\n                setConnecting(false);\n                isConnecting.current = false;\n                return _context.finish(10);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 7, 10, 14]]);\n      }));\n    })();\n  }, [isConnecting, connecting, connected, autoConnect, adapter, ready, setConnecting, setName]); // If the window is closing or reloading, ignore disconnect and error events from the adapter\n\n  useEffect(function () {\n    function listener() {\n      isUnloading.current = true;\n    }\n\n    window.addEventListener('beforeunload', listener);\n    return function () {\n      return window.removeEventListener('beforeunload', listener);\n    };\n  }, [isUnloading]); // Select a wallet by name\n\n  var select = useCallback(function (newName) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(name === newName)) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              if (!adapter) {\n                _context2.next = 5;\n                break;\n              }\n\n              _context2.next = 5;\n              return adapter.disconnect();\n\n            case 5:\n              setName(newName);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n  }, [name, adapter, setName]); // Handle the adapter's ready event\n\n  var onReady = useCallback(function () {\n    return setState(function (state) {\n      return Object.assign(Object.assign({}, state), {\n        ready: true\n      });\n    });\n  }, [setState]); // Handle the adapter's connect event\n\n  var onConnect = useCallback(function () {\n    if (!adapter) return;\n    var connected = adapter.connected,\n        publicKey = adapter.publicKey,\n        ready = adapter.ready;\n    setState(function (state) {\n      return Object.assign(Object.assign({}, state), {\n        connected: connected,\n        publicKey: publicKey,\n        ready: ready\n      });\n    });\n  }, [adapter, setState]); // Handle the adapter's disconnect event\n\n  var onDisconnect = useCallback(function () {\n    // Clear the selected wallet unless the window is unloading\n    if (!isUnloading.current) setName(null);\n  }, [isUnloading, setName]); // Handle the adapter's error event, and local errors\n\n  var onError = useCallback(function (error) {\n    // Call the provided error handler unless the window is unloading\n    if (!isUnloading.current) _onError(error);\n    return error;\n  }, [isUnloading, _onError]); // Connect the adapter to the wallet\n\n  var connect = useCallback(function () {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(isConnecting.current || connecting || disconnecting || connected)) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 2:\n              if (!(!wallet || !adapter)) {\n                _context3.next = 4;\n                break;\n              }\n\n              throw onError(new WalletNotSelectedError());\n\n            case 4:\n              if (ready) {\n                _context3.next = 8;\n                break;\n              }\n\n              // Clear the selected wallet\n              setName(null);\n\n              if (typeof window !== 'undefined') {\n                window.open(wallet.url, '_blank');\n              }\n\n              throw onError(new WalletNotReadyError());\n\n            case 8:\n              isConnecting.current = true;\n              setConnecting(true);\n              _context3.prev = 10;\n              _context3.next = 13;\n              return adapter.connect();\n\n            case 13:\n              _context3.next = 19;\n              break;\n\n            case 15:\n              _context3.prev = 15;\n              _context3.t0 = _context3[\"catch\"](10);\n              // Clear the selected wallet\n              setName(null); // Rethrow the error, and onError will also be called\n\n              throw _context3.t0;\n\n            case 19:\n              _context3.prev = 19;\n              setConnecting(false);\n              isConnecting.current = false;\n              return _context3.finish(19);\n\n            case 23:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[10, 15, 19, 23]]);\n    }));\n  }, [isConnecting, connecting, disconnecting, connected, wallet, adapter, onError, ready, setConnecting, setName]); // Disconnect the adapter from the wallet\n\n  var disconnect = useCallback(function () {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(isDisconnecting.current || disconnecting)) {\n                _context4.next = 2;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 2:\n              if (adapter) {\n                _context4.next = 4;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", setName(null));\n\n            case 4:\n              isDisconnecting.current = true;\n              setDisconnecting(true);\n              _context4.prev = 6;\n              _context4.next = 9;\n              return adapter.disconnect();\n\n            case 9:\n              _context4.next = 15;\n              break;\n\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](6);\n              // Clear the selected wallet\n              setName(null); // Rethrow the error, and onError will also be called\n\n              throw _context4.t0;\n\n            case 15:\n              _context4.prev = 15;\n              setDisconnecting(false);\n              isDisconnecting.current = false;\n              return _context4.finish(15);\n\n            case 19:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[6, 11, 15, 19]]);\n    }));\n  }, [isDisconnecting, disconnecting, adapter, setDisconnecting, setName]); // Send a transaction using the provided connection\n\n  var sendTransaction = useCallback(function (transaction, connection, options) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (adapter) {\n                _context5.next = 2;\n                break;\n              }\n\n              throw onError(new WalletNotSelectedError());\n\n            case 2:\n              if (connected) {\n                _context5.next = 4;\n                break;\n              }\n\n              throw onError(new WalletNotConnectedError());\n\n            case 4:\n              _context5.next = 6;\n              return adapter.sendTransaction(transaction, connection, options);\n\n            case 6:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n  }, [adapter, onError, connected]); // Sign a transaction if the wallet supports it\n\n  var signTransaction = useMemo(function () {\n    return adapter && 'signTransaction' in adapter ? function (transaction) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (connected) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                throw onError(new WalletNotConnectedError());\n\n              case 2:\n                _context6.next = 4;\n                return adapter.signTransaction(transaction);\n\n              case 4:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n    } : undefined;\n  }, [adapter, onError, connected]); // Sign multiple transactions if the wallet supports it\n\n  var signAllTransactions = useMemo(function () {\n    return adapter && 'signAllTransactions' in adapter ? function (transactions) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (connected) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                throw onError(new WalletNotConnectedError());\n\n              case 2:\n                _context7.next = 4;\n                return adapter.signAllTransactions(transactions);\n\n              case 4:\n                return _context7.abrupt(\"return\", _context7.sent);\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n    } : undefined;\n  }, [adapter, onError, connected]); // Sign an arbitrary message if the wallet supports it\n\n  var signMessage = useMemo(function () {\n    return adapter && 'signMessage' in adapter ? function (message) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (connected) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                throw onError(new WalletNotConnectedError());\n\n              case 2:\n                _context8.next = 4;\n                return adapter.signMessage(message);\n\n              case 4:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n    } : undefined;\n  }, [adapter, onError, connected]); // Setup and teardown event listeners when the adapter changes\n\n  useEffect(function () {\n    if (adapter) {\n      adapter.on('ready', onReady);\n      adapter.on('connect', onConnect);\n      adapter.on('disconnect', onDisconnect);\n      adapter.on('error', onError);\n      return function () {\n        adapter.off('ready', onReady);\n        adapter.off('connect', onConnect);\n        adapter.off('disconnect', onDisconnect);\n        adapter.off('error', onError);\n      };\n    }\n  }, [adapter, onReady, onConnect, onDisconnect, onError]);\n  return React.createElement(WalletContext.Provider, {\n    value: {\n      wallets: wallets,\n      autoConnect: autoConnect,\n      wallet: wallet,\n      adapter: adapter,\n      publicKey: publicKey,\n      ready: ready,\n      connected: connected,\n      connecting: connecting,\n      disconnecting: disconnecting,\n      select: select,\n      connect: connect,\n      disconnect: disconnect,\n      sendTransaction: sendTransaction,\n      signTransaction: signTransaction,\n      signAllTransactions: signAllTransactions,\n      signMessage: signMessage\n    }\n  }, children);\n};","map":{"version":3,"sources":["../src/WalletProvider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { WalletNotConnectedError, WalletNotReadyError, } from '@solana/wallet-adapter-base';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { WalletNotSelectedError } from './errors';\nimport { useLocalStorage } from './useLocalStorage';\nimport { WalletContext } from './useWallet';\nconst initialState = {\n    wallet: null,\n    adapter: null,\n    ready: false,\n    publicKey: null,\n    connected: false,\n};\nexport const WalletProvider = ({ children, wallets, autoConnect = false, onError: _onError = (error) => console.error(error), localStorageKey = 'walletName', }) => {\n    const [name, setName] = useLocalStorage(localStorageKey, null);\n    const [{ wallet, adapter, ready, publicKey, connected }, setState] = useState(initialState);\n    const [connecting, setConnecting] = useState(false);\n    const [disconnecting, setDisconnecting] = useState(false);\n    const isConnecting = useRef(false);\n    const isDisconnecting = useRef(false);\n    const isUnloading = useRef(false);\n    // Map of wallet names to wallets\n    const walletsByName = useMemo(() => wallets.reduce((walletsByName, wallet) => {\n        walletsByName[wallet.name] = wallet;\n        return walletsByName;\n    }, {}), [wallets]);\n    // When the selected wallet changes, initialize the state\n    useEffect(() => {\n        const wallet = (name && walletsByName[name]) || null;\n        const adapter = wallet && wallet.adapter();\n        if (adapter) {\n            const { ready, publicKey, connected } = adapter;\n            setState({ wallet, adapter, connected, publicKey, ready });\n        }\n        else {\n            setState(initialState);\n        }\n    }, [name, walletsByName, setState]);\n    // If autoConnect is enabled, try to connect when the adapter changes and is ready\n    useEffect(() => {\n        if (isConnecting.current || connecting || connected || !autoConnect || !adapter || !ready)\n            return;\n        (function () {\n            return __awaiter(this, void 0, void 0, function* () {\n                isConnecting.current = true;\n                setConnecting(true);\n                try {\n                    yield adapter.connect();\n                }\n                catch (error) {\n                    // Clear the selected wallet\n                    setName(null);\n                    // Don't throw error, but onError will still be called\n                }\n                finally {\n                    setConnecting(false);\n                    isConnecting.current = false;\n                }\n            });\n        })();\n    }, [isConnecting, connecting, connected, autoConnect, adapter, ready, setConnecting, setName]);\n    // If the window is closing or reloading, ignore disconnect and error events from the adapter\n    useEffect(() => {\n        function listener() {\n            isUnloading.current = true;\n        }\n        window.addEventListener('beforeunload', listener);\n        return () => window.removeEventListener('beforeunload', listener);\n    }, [isUnloading]);\n    // Select a wallet by name\n    const select = useCallback((newName) => __awaiter(void 0, void 0, void 0, function* () {\n        if (name === newName)\n            return;\n        if (adapter)\n            yield adapter.disconnect();\n        setName(newName);\n    }), [name, adapter, setName]);\n    // Handle the adapter's ready event\n    const onReady = useCallback(() => setState((state) => (Object.assign(Object.assign({}, state), { ready: true }))), [setState]);\n    // Handle the adapter's connect event\n    const onConnect = useCallback(() => {\n        if (!adapter)\n            return;\n        const { connected, publicKey, ready } = adapter;\n        setState((state) => (Object.assign(Object.assign({}, state), { connected,\n            publicKey,\n            ready })));\n    }, [adapter, setState]);\n    // Handle the adapter's disconnect event\n    const onDisconnect = useCallback(() => {\n        // Clear the selected wallet unless the window is unloading\n        if (!isUnloading.current)\n            setName(null);\n    }, [isUnloading, setName]);\n    // Handle the adapter's error event, and local errors\n    const onError = useCallback((error) => {\n        // Call the provided error handler unless the window is unloading\n        if (!isUnloading.current)\n            _onError(error);\n        return error;\n    }, [isUnloading, _onError]);\n    // Connect the adapter to the wallet\n    const connect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n        if (isConnecting.current || connecting || disconnecting || connected)\n            return;\n        if (!wallet || !adapter)\n            throw onError(new WalletNotSelectedError());\n        if (!ready) {\n            // Clear the selected wallet\n            setName(null);\n            if (typeof window !== 'undefined') {\n                window.open(wallet.url, '_blank');\n            }\n            throw onError(new WalletNotReadyError());\n        }\n        isConnecting.current = true;\n        setConnecting(true);\n        try {\n            yield adapter.connect();\n        }\n        catch (error) {\n            // Clear the selected wallet\n            setName(null);\n            // Rethrow the error, and onError will also be called\n            throw error;\n        }\n        finally {\n            setConnecting(false);\n            isConnecting.current = false;\n        }\n    }), [isConnecting, connecting, disconnecting, connected, wallet, adapter, onError, ready, setConnecting, setName]);\n    // Disconnect the adapter from the wallet\n    const disconnect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n        if (isDisconnecting.current || disconnecting)\n            return;\n        if (!adapter)\n            return setName(null);\n        isDisconnecting.current = true;\n        setDisconnecting(true);\n        try {\n            yield adapter.disconnect();\n        }\n        catch (error) {\n            // Clear the selected wallet\n            setName(null);\n            // Rethrow the error, and onError will also be called\n            throw error;\n        }\n        finally {\n            setDisconnecting(false);\n            isDisconnecting.current = false;\n        }\n    }), [isDisconnecting, disconnecting, adapter, setDisconnecting, setName]);\n    // Send a transaction using the provided connection\n    const sendTransaction = useCallback((transaction, connection, options) => __awaiter(void 0, void 0, void 0, function* () {\n        if (!adapter)\n            throw onError(new WalletNotSelectedError());\n        if (!connected)\n            throw onError(new WalletNotConnectedError());\n        return yield adapter.sendTransaction(transaction, connection, options);\n    }), [adapter, onError, connected]);\n    // Sign a transaction if the wallet supports it\n    const signTransaction = useMemo(() => adapter && 'signTransaction' in adapter\n        ? (transaction) => __awaiter(void 0, void 0, void 0, function* () {\n            if (!connected)\n                throw onError(new WalletNotConnectedError());\n            return yield adapter.signTransaction(transaction);\n        })\n        : undefined, [adapter, onError, connected]);\n    // Sign multiple transactions if the wallet supports it\n    const signAllTransactions = useMemo(() => adapter && 'signAllTransactions' in adapter\n        ? (transactions) => __awaiter(void 0, void 0, void 0, function* () {\n            if (!connected)\n                throw onError(new WalletNotConnectedError());\n            return yield adapter.signAllTransactions(transactions);\n        })\n        : undefined, [adapter, onError, connected]);\n    // Sign an arbitrary message if the wallet supports it\n    const signMessage = useMemo(() => adapter && 'signMessage' in adapter\n        ? (message) => __awaiter(void 0, void 0, void 0, function* () {\n            if (!connected)\n                throw onError(new WalletNotConnectedError());\n            return yield adapter.signMessage(message);\n        })\n        : undefined, [adapter, onError, connected]);\n    // Setup and teardown event listeners when the adapter changes\n    useEffect(() => {\n        if (adapter) {\n            adapter.on('ready', onReady);\n            adapter.on('connect', onConnect);\n            adapter.on('disconnect', onDisconnect);\n            adapter.on('error', onError);\n            return () => {\n                adapter.off('ready', onReady);\n                adapter.off('connect', onConnect);\n                adapter.off('disconnect', onDisconnect);\n                adapter.off('error', onError);\n            };\n        }\n    }, [adapter, onReady, onConnect, onDisconnect, onError]);\n    return (React.createElement(WalletContext.Provider, { value: {\n            wallets,\n            autoConnect,\n            wallet,\n            adapter,\n            publicKey,\n            ready,\n            connected,\n            connecting,\n            disconnecting,\n            select,\n            connect,\n            disconnect,\n            sendTransaction,\n            signTransaction,\n            signAllTransactions,\n            signMessage,\n        } }, children));\n};\n//# sourceMappingURL=WalletProvider.js.map"]},"metadata":{},"sourceType":"module"}