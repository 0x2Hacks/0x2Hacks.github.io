{"ast":null,"code":"import randombytes from 'randombytes';\nimport base64urlLib from 'base64url';\nimport keccakLib from 'keccak'; // TODO: should be crypto safe\n\nconst randomId = () => randombytes(32).toString(\"hex\");\n\nclass URLWithHashParams extends URL {\n  constructor() {\n    super(...arguments);\n    this.hashParams = new URLSearchParams();\n  }\n\n  toString() {\n    this.hash = this.hashParams.toString();\n    return super.toString.call(this);\n  }\n\n}\n\nconst base64url = base64urlLib;\n\nfunction safebtoa(str) {\n  return base64url.encode(str);\n}\n\nfunction safeatob(str) {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return base64url.decode(str);\n}\n\nconst keccak = keccakLib;\n\nfunction base64toJSON(b64str) {\n  return JSON.parse(base64url.decode(b64str));\n}\n\nfunction jsonToBase64(json) {\n  return base64url.encode(JSON.stringify(json));\n}\n\nfunction keccak256(str) {\n  let input = str;\n\n  if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n    input = Buffer.from(str.slice(2), \"hex\");\n  }\n\n  const data = `0x${keccak(\"keccak256\").update(input).digest(\"hex\").padStart(64, \"0\")}`;\n  return data;\n}\n\nexport { URLWithHashParams, base64toJSON, base64url, jsonToBase64, keccak, keccak256, randomId, safeatob, safebtoa };","map":{"version":3,"sources":["../src/randomId.ts","../src/url.ts","../src/utils.ts"],"names":[],"mappings":";;gCAAA;;MAGa,QAAQ,GAAG,MAAc,WAAW,CAAC,EAAD,CAAX,CAAgB,QAAhB,CAAyB,KAAzB,C;;MCDzB,iB,SAA0B,G,CAAG;AAA1C,EAAA,WAAA,GAAA;;AACE,SAAA,UAAA,GAAyB,IAAI,eAAJ,EAAzB;AAMD;;AAJC,EAAA,QAAQ,GAAA;AACN,SAAK,IAAL,GAAY,KAAK,UAAL,CAAgB,QAAhB,EAAZ;AACA,WAAO,MAAM,QAAN,CAAe,IAAf,CAAoB,IAApB,CAAP;AACD;;AANuC;;MCC7B,SAAS,GAAG,Y;;SAET,Q,CAAS,G,EAAW;AAClC,SAAO,SAAS,CAAC,MAAV,CAAiB,GAAjB,CAAP;AACD;;SAEe,Q,CAAS,G,EAAW;;AAElC,SAAO,SAAS,CAAC,MAAV,CAAiB,GAAjB,CAAP;AACD;;MAEY,MAAM,GAAG,S;;SAIN,Y,CAAa,M,EAAc;AACzC,SAAO,IAAI,CAAC,KAAL,CAAW,SAAS,CAAC,MAAV,CAAiB,MAAjB,CAAX,CAAP;AACD;;SAEe,Y,CAAa,I,EAA6B;AACxD,SAAO,SAAS,CAAC,MAAV,CAAiB,IAAI,CAAC,SAAL,CAAe,IAAf,CAAjB,CAAP;AACD;;SAEe,S,CAAU,G,EAAW;AACnC,MAAI,KAAK,GAAoB,GAA7B;;AACA,MAAI,OAAO,GAAP,KAAe,QAAf,IAA2B,GAAG,CAAC,KAAJ,CAAU,CAAV,EAAa,CAAb,MAAoB,IAA/C,IAAuD,GAAG,CAAC,MAAJ,KAAe,EAA1E,EAA8E;AAC5E,IAAA,KAAK,GAAG,MAAM,CAAC,IAAP,CAAY,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAZ,EAA0B,KAA1B,CAAR;AACD;;AACD,QAAM,IAAI,GAAG,KAAK,MAAM,CAAC,WAAD,CAAN,CAAoB,MAApB,CAA2B,KAA3B,EAAkC,MAAlC,CAAyC,KAAzC,EAAgD,QAAhD,CAAyD,EAAzD,EAA6D,GAA7D,CAAiE,EAAnF;AACA,SAAO,IAAP;AACF","sourcesContent":["import randombytes from 'randombytes';\nimport base64urlLib from 'base64url';\nimport keccakLib from 'keccak';\n\n// TODO: should be crypto safe\nconst randomId = () => randombytes(32).toString(\"hex\");\n\nclass URLWithHashParams extends URL {\n    constructor() {\n        super(...arguments);\n        this.hashParams = new URLSearchParams();\n    }\n    toString() {\n        this.hash = this.hashParams.toString();\n        return super.toString.call(this);\n    }\n}\n\nconst base64url = base64urlLib;\nfunction safebtoa(str) {\n    return base64url.encode(str);\n}\nfunction safeatob(str) {\n    // Going backwards: from bytestream, to percent-encoding, to original string.\n    return base64url.decode(str);\n}\nconst keccak = keccakLib;\nfunction base64toJSON(b64str) {\n    return JSON.parse(base64url.decode(b64str));\n}\nfunction jsonToBase64(json) {\n    return base64url.encode(JSON.stringify(json));\n}\nfunction keccak256(str) {\n    let input = str;\n    if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n        input = Buffer.from(str.slice(2), \"hex\");\n    }\n    const data = `0x${keccak(\"keccak256\").update(input).digest(\"hex\").padStart(64, \"0\")}`;\n    return data;\n}\n\nexport { URLWithHashParams, base64toJSON, base64url, jsonToBase64, keccak, keccak256, randomId, safeatob, safebtoa };\n//# sourceMappingURL=openloginUtils.esm.js.map\n"]},"metadata":{},"sourceType":"module"}