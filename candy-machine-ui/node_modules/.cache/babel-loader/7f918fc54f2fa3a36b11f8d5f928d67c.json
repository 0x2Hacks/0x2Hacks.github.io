{"ast":null,"code":"import * as anchor from '@project-serum/anchor';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { SystemProgram, SYSVAR_SLOT_HASHES_PUBKEY } from '@solana/web3.js';\nimport { sendTransactions, SequenceType } from './connection';\nimport { CIVIC, getAtaForMint, getNetworkExpire, getNetworkToken, SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID } from './utils';\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey('cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ');\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');\nexport const awaitTransactionSignatureConfirmation = async function (txid, timeout, connection) {\n  let queryStatus = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let done = false;\n  let status = {\n    slot: 0,\n    confirmations: 0,\n    err: null\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({\n        timeout: true\n      });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([txid]);\n          status = signatureStatuses && signatureStatuses.value[0];\n\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n\n      await sleep(2000);\n    }\n  }); //@ts-ignore\n\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (associatedTokenAddress, payer, walletAddress, splTokenMintAddress) => {\n  const keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: associatedTokenAddress,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: walletAddress,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: splTokenMintAddress,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: anchor.web3.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: TOKEN_PROGRAM_ID,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([])\n  });\n};\n\nexport const getCandyMachineState = async (anchorWallet, candyMachineId, connection) => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed'\n  });\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n  const state = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority\n    }\n  };\n};\n\nconst getMasterEdition = async mint => {\n  return (await anchor.web3.PublicKey.findProgramAddress([Buffer.from('metadata'), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer(), Buffer.from('edition')], TOKEN_METADATA_PROGRAM_ID))[0];\n};\n\nconst getMetadata = async mint => {\n  return (await anchor.web3.PublicKey.findProgramAddress([Buffer.from('metadata'), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()], TOKEN_METADATA_PROGRAM_ID))[0];\n};\n\nexport const getCandyMachineCreator = async candyMachine => {\n  return await anchor.web3.PublicKey.findProgramAddress([Buffer.from('candy_machine'), candyMachine.toBuffer()], CANDY_MACHINE_PROGRAM);\n};\nexport const getCollectionPDA = async candyMachineAddress => {\n  return await anchor.web3.PublicKey.findProgramAddress([Buffer.from('collection'), candyMachineAddress.toBuffer()], CANDY_MACHINE_PROGRAM);\n};\nexport const getCollectionAuthorityRecordPDA = async (mint, newAuthority) => {\n  return (await anchor.web3.PublicKey.findProgramAddress([Buffer.from('metadata'), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer(), Buffer.from('collection_authority'), newAuthority.toBuffer()], TOKEN_METADATA_PROGRAM_ID))[0];\n};\nexport const createAccountsForMint = async (candyMachine, payer) => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (await getAtaForMint(mint.publicKey, payer))[0];\n  const signers = [mint];\n  const instructions = [anchor.web3.SystemProgram.createAccount({\n    fromPubkey: payer,\n    newAccountPubkey: mint.publicKey,\n    space: MintLayout.span,\n    lamports: await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(MintLayout.span),\n    programId: TOKEN_PROGRAM_ID\n  }), Token.createInitMintInstruction(TOKEN_PROGRAM_ID, mint.publicKey, 0, payer, payer), createAssociatedTokenAccountInstruction(userTokenAccountAddress, payer, payer, mint.publicKey), Token.createMintToInstruction(TOKEN_PROGRAM_ID, mint.publicKey, userTokenAccountAddress, payer, [], 1)];\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (await sendTransactions(candyMachine.program.provider.connection, candyMachine.program.provider.wallet, [instructions], [signers], SequenceType.StopOnFailure, 'singleGossip', () => {}, () => false, undefined, [], [])).txs[0].txid\n  };\n};\nexport const mintOneToken = async function (candyMachine, payer) {\n  var _setupState$mint;\n\n  let beforeTransactions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let afterTransactions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let setupState = arguments.length > 4 ? arguments[4] : undefined;\n  const mint = (_setupState$mint = setupState === null || setupState === void 0 ? void 0 : setupState.mint) !== null && _setupState$mint !== void 0 ? _setupState$mint : anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (await getAtaForMint(mint.publicKey, payer))[0];\n  const userPayingAccountAddress = candyMachine.state.tokenMint ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0] : payer;\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const instructions = [];\n  const signers = [];\n  console.log('SetupState: ', setupState);\n\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(...[anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports: await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(MintLayout.span),\n      programId: TOKEN_PROGRAM_ID\n    }), Token.createInitMintInstruction(TOKEN_PROGRAM_ID, mint.publicKey, 0, payer, payer), createAssociatedTokenAccountInstruction(userTokenAccountAddress, payer, payer, mint.publicKey), Token.createMintToInstruction(TOKEN_PROGRAM_ID, mint.publicKey, userTokenAccountAddress, payer, [], 1)]);\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (await getNetworkToken(payer, candyMachine.state.gatekeeper.gatekeeperNetwork))[0],\n      isWritable: true,\n      isSigner: false\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false\n      });\n      remainingAccounts.push({\n        pubkey: (await getNetworkExpire(candyMachine.state.gatekeeper.gatekeeperNetwork))[0],\n        isWritable: false,\n        isSigner: false\n      });\n    }\n  }\n\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(candyMachine.state.whitelistMintSettings.mint);\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false\n      });\n      remainingAccounts.push({\n        pubkey: payer,\n        isWritable: false,\n        isSigner: true\n      });\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false\n    });\n    remainingAccounts.push({\n      pubkey: payer,\n      isWritable: false,\n      isSigner: true\n    });\n  }\n\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(candyMachineAddress);\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\n  instructions.push(await candyMachine.program.instruction.mintNft(creatorBump, {\n    accounts: {\n      candyMachine: candyMachineAddress,\n      candyMachineCreator,\n      payer: payer,\n      wallet: candyMachine.state.treasury,\n      mint: mint.publicKey,\n      metadata: metadataAddress,\n      masterEdition,\n      mintAuthority: payer,\n      updateAuthority: payer,\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n      recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n      instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY\n    },\n    remainingAccounts: remainingAccounts.length > 0 ? remainingAccounts : undefined\n  }));\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount = await candyMachine.program.provider.connection.getAccountInfo(collectionPDA);\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData = await candyMachine.program.account.collectionPda.fetch(collectionPDA);\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(collectionMint, collectionPDA);\n      console.log(collectionMint);\n\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log('Collection PDA: ', collectionPDA.toBase58());\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\n        instructions.push(await candyMachine.program.instruction.setCollectionDuringMint({\n          accounts: {\n            candyMachine: candyMachineAddress,\n            metadata: metadataAddress,\n            payer: payer,\n            collectionPda: collectionPDA,\n            tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n            instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n            collectionMint,\n            collectionMetadata,\n            collectionMasterEdition,\n            authority: candyMachine.state.authority,\n            collectionAuthorityRecord\n          }\n        }));\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions];\n  const signersMatrix = [signers];\n\n  try {\n    const txns = (await sendTransactions(candyMachine.program.provider.connection, candyMachine.program.provider.wallet, instructionsMatrix, signersMatrix, SequenceType.StopOnFailure, 'singleGossip', () => {}, () => false, undefined, beforeTransactions, afterTransactions)).txs.map(t => t.txid);\n    const mintTxn = txns[0];\n    return {\n      mintTxId: mintTxn,\n      metadataKey: metadataAddress\n    };\n  } catch (e) {\n    console.log(e);\n  }\n\n  return null;\n};\nexport const shortenAddress = function (address) {\n  let chars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};","map":{"version":3,"sources":["/workspace/0x2Hacks.github.io/candy-machine-ui/src/candy-machine.ts"],"names":["anchor","MintLayout","TOKEN_PROGRAM_ID","Token","SystemProgram","SYSVAR_SLOT_HASHES_PUBKEY","sendTransactions","SequenceType","CIVIC","getAtaForMint","getNetworkExpire","getNetworkToken","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CANDY_MACHINE_PROGRAM","web3","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","signatureStatuses","getSignatureStatuses","value","e","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","Provider","preflightCommitment","idl","Program","fetchIdl","program","state","account","candyMachine","fetch","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","id","authority","isSoldOut","isActive","isPresale","isWhitelistOnly","goLiveDate","treasury","wallet","tokenMint","gatekeeper","endSettings","whitelistMintSettings","hiddenSettings","price","retainAuthority","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","getCollectionPDA","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","createAccountsForMint","Keypair","generate","userTokenAccountAddress","publicKey","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","span","lamports","getMinimumBalanceForRentExemption","createInitMintInstruction","createMintToInstruction","userTokenAccount","transaction","StopOnFailure","undefined","txs","mintOneToken","beforeTransactions","afterTransactions","setupState","userPayingAccountAddress","remainingAccounts","push","gatekeeperNetwork","expireOnUse","whitelistToken","mode","burnEveryTime","metadataAddress","masterEdition","candyMachineCreator","creatorBump","map","rm","toBase58","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","collectionPDA","collectionPDAAccount","getAccountInfo","collectionData","collectionPda","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","error","instructionsMatrix","signersMatrix","txns","t","mintTxn","mintTxId","metadataKey","shortenAddress","address","chars","slice","ms"],"mappings":"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","sourcesContent":["import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from '@solana/web3.js';\nimport { sendTransactions, SequenceType } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: null | anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('collection'), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('collection_authority'),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions],\n        [signers],\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        [],\n        [],\n      )\n    ).txs[0].txid,\n  };\n};\n\ntype MintResult = {\n  mintTxId: string;\n  metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n  setupState?: SetupState,\n): Promise<MintResult | null> => {\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log('SetupState: ', setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n      ...[\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports:\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span,\n            ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          payer,\n          payer,\n        ),\n        createAssociatedTokenAccountInstruction(\n          userTokenAccountAddress,\n          payer,\n          payer,\n          mint.publicKey,\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          userTokenAccountAddress,\n          payer,\n          [],\n          1,\n        ),\n      ],\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: payer,\n        isWritable: false,\n        isSigner: true,\n      });\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: payer,\n      isWritable: false,\n      isSigner: true,\n    });\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA,\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA,\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA,\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log('Collection PDA: ', collectionPDA.toBase58());\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          }),\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions];\n  const signersMatrix = [signers];\n\n  try {\n    const txns = (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions,\n      )\n    ).txs.map(t => t.txid);\n    const mintTxn = txns[0];\n    return {\n      mintTxId: mintTxn,\n      metadataKey: metadataAddress,\n    };\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n"]},"metadata":{},"sourceType":"module"}