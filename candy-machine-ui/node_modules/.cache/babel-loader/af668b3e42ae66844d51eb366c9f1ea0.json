{"ast":null,"code":"\"use strict\";\n\nvar _inherits = require(\"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _classCallCheck = require(\"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/workspace/0x2Hacks.github.io/candy-machine-ui/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Enum = exports.Assignable = exports.SCHEMA = void 0;\n\nvar borsh_1 = require(\"borsh\");\n\nexports.SCHEMA = new Map(); // Class wrapping a plain object\n\nvar Assignable = /*#__PURE__*/function () {\n  function Assignable(properties) {\n    var _this = this;\n\n    _classCallCheck(this, Assignable);\n\n    Object.keys(properties).forEach(function (key) {\n      // this is probably possible in Typescript,\n      // but requires (keyof this) which is not possible in the the constructor\n      // @ts-ignore\n      _this[key] = properties[key];\n    });\n  }\n\n  _createClass(Assignable, [{\n    key: \"encode\",\n    value: function encode() {\n      return Buffer.from((0, borsh_1.serialize)(exports.SCHEMA, this));\n    }\n  }], [{\n    key: \"decode\",\n    value: function decode(data) {\n      return (0, borsh_1.deserialize)(exports.SCHEMA, this, data);\n    }\n  }]);\n\n  return Assignable;\n}();\n\nexports.Assignable = Assignable; // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\nvar Enum = /*#__PURE__*/function (_Assignable) {\n  _inherits(Enum, _Assignable);\n\n  var _super = _createSuper(Enum);\n\n  function Enum(properties) {\n    var _this2;\n\n    _classCallCheck(this, Enum);\n\n    _this2 = _super.call(this, properties);\n\n    if (Object.keys(properties).length !== 1) {\n      throw new Error(\"Enum can only take single value\");\n    }\n\n    _this2.enum = \"\";\n    Object.keys(properties).forEach(function (key) {\n      _this2.enum = key;\n    });\n    return _this2;\n  }\n\n  return _createClass(Enum);\n}(Assignable);\n\nexports.Enum = Enum;","map":{"version":3,"sources":["../../src/lib/solanaBorsh.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEa,OAAA,CAAA,MAAA,GAAiB,IAAI,GAAJ,EAAjB,C,CAEb;;IACsB,U;AACpB,sBAAY,UAAZ,EAA8C;AAAA;;AAAA;;AAC5C,IAAA,MAAM,CAAC,IAAP,CAAY,UAAZ,EAAwB,OAAxB,CAAgC,UAAC,GAAD,EAAgB;AAC9C;AACA;AACA;AACA,MAAA,KAAI,CAAC,GAAD,CAAJ,GAAY,UAAU,CAAC,GAAD,CAAtB;AACD,KALD;AAMD;;;;WAED,kBAAM;AACJ,aAAO,MAAM,CAAC,IAAP,CAAY,CAAA,GAAA,OAAA,CAAA,SAAA,EAAU,OAAA,CAAA,MAAV,EAAkB,IAAlB,CAAZ,CAAP;AACD;;;WAED,gBAAoC,IAApC,EAAgD;AAC9C,aAAO,CAAA,GAAA,OAAA,CAAA,WAAA,EAAY,OAAA,CAAA,MAAZ,EAAoB,IAApB,EAA0B,IAA1B,CAAP;AACD;;;;;;AAhBH,OAAA,CAAA,UAAA,GAAA,UAAA,C,CAmBA;AACA;;IACsB,I;;;;;AAGpB,gBAAY,UAAZ,EAA2B;AAAA;;AAAA;;AACzB,+BAAM,UAAN;;AACA,QAAI,MAAM,CAAC,IAAP,CAAY,UAAZ,EAAwB,MAAxB,KAAmC,CAAvC,EAA0C;AACxC,YAAM,IAAI,KAAJ,CAAU,iCAAV,CAAN;AACD;;AACD,WAAK,IAAL,GAAY,EAAZ;AACA,IAAA,MAAM,CAAC,IAAP,CAAY,UAAZ,EAAwB,OAAxB,CAAgC,UAAC,GAAD,EAAQ;AACtC,aAAK,IAAL,GAAY,GAAZ;AACD,KAFD;AANyB;AAS1B;;;EAZgC,U;;AAAnC,OAAA,CAAA,IAAA,GAAA,IAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Enum = exports.Assignable = exports.SCHEMA = void 0;\nconst borsh_1 = require(\"borsh\");\nexports.SCHEMA = new Map();\n// Class wrapping a plain object\nclass Assignable {\n    constructor(properties) {\n        Object.keys(properties).forEach((key) => {\n            // this is probably possible in Typescript,\n            // but requires (keyof this) which is not possible in the the constructor\n            // @ts-ignore\n            this[key] = properties[key];\n        });\n    }\n    encode() {\n        return Buffer.from((0, borsh_1.serialize)(exports.SCHEMA, this));\n    }\n    static decode(data) {\n        return (0, borsh_1.deserialize)(exports.SCHEMA, this, data);\n    }\n}\nexports.Assignable = Assignable;\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nclass Enum extends Assignable {\n    constructor(properties) {\n        super(properties);\n        if (Object.keys(properties).length !== 1) {\n            throw new Error(\"Enum can only take single value\");\n        }\n        this.enum = \"\";\n        Object.keys(properties).forEach((key) => {\n            this.enum = key;\n        });\n    }\n}\nexports.Enum = Enum;\n//# sourceMappingURL=solanaBorsh.js.map"]},"metadata":{},"sourceType":"script"}